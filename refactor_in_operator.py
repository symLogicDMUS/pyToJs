import re
from print_list import print_list

# if (x and y) in arr


def refactor_in_operator(line_data):
    """ """
    for i in range(len(line_data)):
        if re.search(r'([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)\s+in\s+([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)', line_data[i][2]) is not None:
            match = re.search(r'([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)\s+in\s+([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)', line_data[i][2]).group()
            item1 = re.search(r'([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)\s+in\s+([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)', line_data[i][2]).group(1)
            item2 = re.search(r'([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)\s+in\s+([a-zA-Z_][a-zA-Z0-9_.]+([(][^)]*[)])*)', line_data[i][2]).group(3)
            line_data[i][2] = line_data[i][2].replace(match, '{}.includes({})'.format(item2, item1))
    return line_data


if __name__ == "__main__":
    line_data = \
        [
            [0, 1, ' from coordType.to_xy import to_xy\n'],
            [1, 0, 'import { to_rankfile } from "coordType/to_rankfile";\n'],
            [2, 0, 'import { get_piece_type } from "getters/get_piece_type";\n'],
            [3, 0, 'import { get_piece_types } from "getters/get_piece_types";\n'],
            [4, 0, 'import { * } from "misc/g_status_types";\n'],
            [5, 0, 'import { JsonRecordError } from "misc/JsonRecordError";\n'],
            [6, 0, 'import "json";\n'],
            [7, 0, 'export class JsonRecords(object) {\n'],
            [8, 4, '    """contains info for new or saved game relevant to perfoming a castle or en_passant"""\n'],
            [9, 4, '    constructor(file, board, j_records=None) {\n'],
            [10, 8, '        if (j_records is None) {\n'],
            [11, 12, '            let f = open(file, "r")\n'],
            [12, 12, '            let json_data = f.read()\n'],
            [13, 12, '            let records = json.loads(json_data)\n'],
            [14, 12, '            json.dumps(records, indent=4, sort_keys=False)\n'],
            [15, 12, '            f.close()\n'],
            [16, 8, '        }\n'],
            [17, 8, '        else {\n'],
            [18, 12, '            records = j_records\n'],
            [19, 8, '        }\n'],
            [20, 8, "        this.rooks_moved = records['rooks_moved']\n"],
            [21, 8, "        this.kings_moved = records['kings_moved']\n"],
            [22, 8, "        this.pawn_histories = records['pawn_histories']\n"],
            [23, 8, "        this.last_pawn_move = records['last_pawn_move']\n"],
            [24, 8, "        this.num_consecutive_non_pawn_moves = records['num_consecutive_non_pawn_moves']\n"],
            [25, 8, "        this.game_status = records['game_status']\n"],
            [26, 8, "        this.condition = records['condition']\n"],
            [27, 8, "        this.winner = records['winner']\n"],
            [28, 8, '        if (j_records is None) {\n'],
            [29, 12, '            this._init_pawn_ids(board, file=file)\n'],
            [30, 12, '            this._rankfile_to_tuple()\n'],
            [31, 8, '        }\n'],
            [32, 8, '        else {\n'],
            [33, 12, '            this._rankfile_to_tuple(from_web=True)\n'],
            [34, 8, '        }\n'],
            [35, 4, '    }\n'],
            [36, 4, '    _init_pawn_ids(board, file="") {\n'],
            [37, 8, '        """exchange the sqr that pawn started the game with, with the id for that pawn"""\n'],
            [38, 8, '        pawn_histories = {}\n'],
            [39, 8, '        for (var hist of this.pawn_histories.values()) {\n'],
            [40, 12, '            let sqr1 = hist[-1]\n'],
            [41, 12, '            let id_ = board[sqr1]\n'],
            [42, 12, '            pawn_histories[id_] = hist\n'],
            [43, 12, "            if (get_piece_type(id_) != 'Pawn') {\n"],
            [44, 16, '                print("ERROR: Pawn history not correct")\n'],
            [45, 16, '                print(file)\n'],
            [46, 16, '                print(sqr1)\n'],
            [47, 16, '                print(id_)\n'],
            [48, 16, '                raise JsonRecordError\n'],
            [49, 12, '            }\n'],
            [50, 8, '        }\n'],
            [51, 8, '        this.pawn_histories = pawn_histories\n'],
            [52, 4, '    }\n'],
            [53, 4, '    _init_pawn_locs() {\n'],
            [54, 8,
             '        """swap the key of each pawn_history entry with the coordinate of its current location"""\n'],
            [55, 8, '        pawn_histories = {}\n'],
            [56, 8, '        for (var hist of this.pawn_histories.values()) {\n'],
            [57, 12, '            let sqr = hist[-1]\n'],
            [58, 12, '            pawn_histories[sqr] = hist\n'],
            [59, 8, '        }\n'],
            [60, 8, '        this.pawn_histories = pawn_histories\n'],
            [61, 4, '    }\n'],
            [62, 4, '    _rankfile_to_tuple(from_web=False) {\n'],
            [63, 8, '        """convert the keys and ids for each type of record from a rankfile to a tuple"""\n'],
            [64, 8, '        rooks_moved = {}\n'],
            [65, 8, '        kings_moved = {}\n'],
            [66, 8, '        pawn_histories = {}\n'],
            [67, 8, '        last_pawn_move = None\n'],
            [68, 8, '        for (var rf of this.rooks_moved.keys()) {\n'],
            [69, 12, '            let xy = to_xy(rf)\n'],
            [70, 12, '            rooks_moved[xy] = this.rooks_moved[rf]\n'],
            [71, 8, '        }\n'],
            [72, 8, '        for (var rf of this.kings_moved.keys()) {\n'],
            [73, 12, '            xy = to_xy(rf)\n'],
            [74, 12, '            kings_moved[xy] = this.kings_moved[rf]\n'],
            [75, 8, '        }\n'],
            [76, 8, '        if (from_web) {\n'],
            [77, 12, '            for (var id_ of this.pawn_histories.keys()) {\n'],
            [78, 16,
             '                this.pawn_histories[id_] = list(map(lambda li: to_xy(li), this.pawn_histories[id_]))\n'],
            [79, 12, '            }\n'],
            [80, 8, '        }\n'],
            [81, 8, '        else {\n'],
            [82, 12, '            for (var rf1 of this.pawn_histories.keys()) {\n'],
            [83, 16, '                let xy1 = to_xy(rf1)\n'],
            [84, 16, '                pawn_histories[xy1] = []\n'],
            [85, 16, '                for (var rf2 of this.pawn_histories[rf1]) {\n'],
            [86, 20, '                    let xy2 = to_xy(rf2)\n'],
            [87, 20, '                    pawn_histories[xy1].append(xy2)\n'],
            [88, 16, '                }\n'],
            [89, 12, '            }\n'],
            [90, 8, '        }\n'],
            [91, 8, '        this.rooks_moved = rooks_moved\n'],
            [92, 8, '        this.kings_moved = kings_moved\n'],
            [93, 8, '        this.pawn_histories = pawn_histories\n'],
            [94, 8, "        if (this.last_pawn_move != 'None') {\n"],
            [95, 12, '            this.last_pawn_move = to_xy(this.last_pawn_move)\n'],
            [96, 8, '        }\n'],
            [97, 4, '    }\n'],
            [98, 4, '    _tuple_to_rankfile(for_web=False) {\n'],
            [99, 8, '        """convert the keys and ids for each type of record from a tuple to a rankfile"""\n'],
            [100, 8, '        rooks_moved = {}\n'],
            [101, 8, '        kings_moved = {}\n'],
            [102, 8, '        pawn_histories = {}\n'],
            [103, 8, '        this._init_pawn_locs()\n'],
            [104, 8, '        for (var xy of this.rooks_moved.keys()) {\n'],
            [105, 12, '            let rf = to_rankfile(xy)\n'],
            [106, 12, '            rooks_moved[rf] = this.rooks_moved[xy]\n'],
            [107, 8, '        }\n'],
            [108, 8, '        for (var xy of this.kings_moved.keys()) {\n'],
            [109, 12, '            rf = to_rankfile(xy)\n'],
            [110, 12, '            kings_moved[rf] = this.kings_moved[xy]\n'],
            [111, 8, '        }\n'],
            [112, 8, '        if (for_web) {\n'],
            [113, 12, '            for (var id_ of this.pawn_histories.keys()) {\n'],
            [114, 16,
             '                this.pawn_histories[id_] = list(map(lambda li: to_rankfile(li), this.pawn_histories[id_]))\n'],
            [115, 12, '            }\n'],
            [116, 8, '        }\n'],
            [117, 8, '        else {\n'],
            [118, 12, '            for (var xy1 of this.pawn_histories.keys()) {\n'],
            [119, 16, '                let rf1 = to_rankfile(xy1)\n'],
            [120, 16, '                pawn_histories[rf1] = []\n'],
            [121, 16, '                for (var xy2 of this.pawn_histories[xy1]) {\n'],
            [122, 20, '                    let rf2 = to_rankfile(xy2)\n'],
            [123, 20, '                    pawn_histories[rf1].append(rf2)\n'],
            [124, 16, '                }\n'],
            [125, 12, '            }\n'],
            [126, 8, '        }\n'],
            [127, 8, '        this.rooks_moved = rooks_moved\n'],
            [128, 8, '        this.kings_moved = kings_moved\n'],
            [129, 8, '        this.pawn_histories = pawn_histories\n'],
            [130, 8, "        if (this.last_pawn_move != 'None') {\n"],
            [131, 12, '            this.last_pawn_move = to_rankfile(this.last_pawn_move)\n'],
            [132, 8, '        }\n'],
            [133, 4, '    }\n'],
            [134, 4, '    update_hist(id_, start, dest, promo_flag) {\n'],
            [135, 8, '        """update json records depending on the piece type of id_ at location start"""\n'],
            [136, 8, '        let p_type = get_piece_type(id_)\n'],
            [137, 8, '        if (p_type != "Pawn") {\n'],
            [138, 12, '            this.num_consecutive_non_pawn_moves += 1\n'],
            [139, 12, "            if (p_type == 'Rook' and start in this.rooks_moved.keys()) {\n"],
            [140, 16, '                this.update_rooks_moved(start)\n'],
            [141, 12, '            }\n'],
            [142, 12, "            else if (p_type == 'King' and start in this.kings_moved.keys()) {\n"],
            [143, 16, '                this.update_kings_moved(start)\n'],
            [144, 12, '            }\n'],
            [145, 8, '        }\n'],
            [146, 8, '        else {\n'],
            [147, 12, '            this.reset_non_pawn_moves()\n'],
            [148, 12, '            this.last_pawn_move = dest\n'],
            [149, 12, '            this.update_pawn_history(id_, dest, promo_flag)\n'],
            [150, 8, '        }\n'],
            [151, 8, '        return\n'],
            [152, 4, '    }\n'],
            [153, 4, '    update_state(board, ranges, enemy_color, npck) {\n'],
            [154, 8, '        """\n'],
            [155, 9, '         update the status of the game: OVER or IN_PROGRESS\n'],
            [156, 9, "         update the winner of the game: 'w', 'b', or '-' (neither)\n"],
            [157, 9, "         udpate the condition of the enemy king: 'check', 'checkmate', 'stalemate', or 'safe'\n"],
            [158, 9, '         :param board: dict, game board\n'],
            [159, 9, '         :param npck: int, number of pieces checking the king\n'],
            [160, 9, '         :param ranges: dict, ranges of pieces of color\n'],
            [161, 9, '         :param enemy_color: str, color of king\n'],
            [162, 8, '        """\n'],
            [163, 8, '        if (not any(ranges.values())) {\n'],
            [164, 12, '            if (npck > 0) {\n'],
            [165, 16,
             "                this.condition, this.game_status, this.winner = 'checkmate', OVER, enemy_color\n"],
            [166, 12, '            }\n'],
            [167, 12, '            else {\n'],
            [168, 16, "                this.condition, this.game_status, this.winner = 'stalemate', OVER, '-'\n"],
            [169, 12, '            }\n'],
            [170, 12, '            return\n'],
            [171, 8, '        }\n'],
            [172, 8, '        let piece_types = get_piece_types(board)\n'],
            [173, 8,
             "        if (piece_types in [['King', 'King'], ['Bishop', 'King', 'King'], ['King', 'King', 'Knight']]) {\n"],
            [174, 12, "            this.condition, this.game_status, this.winner = 'stalemate', OVER, '-'\n"],
            [175, 8, '        }\n'],
            [176, 8, '        else if (npck > 0) {\n'],
            [177, 12, "            this.condition, this.game_status, this.winner = 'check', IN_PROGRESS, '-'\n"],
            [178, 8, '        }\n'],
            [179, 8, '        else {\n'],
            [180, 12, "            this.condition, this.game_status, this.winner = '', IN_PROGRESS, '-'\n"],
            [181, 8, '        }\n'],
            [182, 4, '    }\n'],
            [183, 4, '    update_rooks_moved(sqr) {\n'],
            [184, 8, '        """update rooks_moved because rook that start game at sqr has moved"""\n'],
            [185, 8, '        this.rooks_moved[sqr] = True\n'],
            [186, 4, '    }\n'],
            [187, 4, '    update_kings_moved(sqr) {\n'],
            [188, 8, '        """update kings_moved because king that started game at sqr has moved"""\n'],
            [189, 8, '        this.kings_moved[sqr] = True\n'],
            [190, 4, '    }\n'],
            [191, 4, '    update_pawn_history(id_, new_loc, promo) {\n'],
            [192, 8, '        """update location of pawn by appending its new location to its history"""\n'],
            [193, 8, '        if (promo) {\n'],
            [194, 12, '            del this.pawn_histories[id_]\n'],
            [195, 8, '        }\n'],
            [196, 8, '        else {\n'],
            [197, 12, '            this.pawn_histories[id_].append(new_loc)\n'],
            [198, 8, '        }\n'],
            [199, 4, '    }\n'],
            [200, 4, '    get_records(for_web=False) {\n'],
            [201, 8, '        """return the json records as one python dict"""\n'],
            [202, 8, '        if (for_web) {\n'],
            [203, 12, '            this._tuple_to_rankfile(for_web=True)\n'],
            [204, 8, '        }\n'],
            [205, 8, "        return {'rooks_moved': this.rooks_moved, 'kings_moved': this.kings_moved,\n"],
            [206, 16,
             "                'pawn_histories': this.pawn_histories, 'last_pawn_move': this.last_pawn_move,\n"],
            [207, 16, "                'num_consecutive_non_pawn_moves': this.num_consecutive_non_pawn_moves,\n"],
            [208, 16,
             "                'game_status': this.game_status, 'condition': this.condition, 'winner': this.winner}\n"],
            [209, 4, '    }\n'],
            [210, 4, '    reset_non_pawn_moves() {\n'],
            [211, 8, '        """ a pawn has just moved, so reset number of consecutive non pawn moves to 0"""\n'],
            [212, 8, '        this.num_consecutive_non_pawn_moves = 0\n'],
            [213, 4, '    }\n'],
            [214, 4, '    delete_pawn(id) {\n'],
            [215, 8, '        """delete pawn with id from pawn histories"""\n'],
            [216, 8, '        del this.pawn_histories[id]\n'],
            [217, 4, '    }\n'],
            [218, 4, '    has_king_moved(color) {\n'],
            [219, 8, '        """return true/false of if the King of color has moved from its starting position"""\n'],
            [220, 8, "        if (color == 'W') {\n"],
            [221, 12, '            return this.kings_moved[(5, 1)]\n'],
            [222, 8, '        }\n'],
            [223, 8, "        else if (color == 'B') {\n"],
            [224, 12, '            return this.kings_moved[(5, 8)]\n'],
            [225, 8, '        }\n'],
            [226, 8, '        else {\n'],
            [227, 12, "            print('error: not a valid color\\n')\n"],
            [228, 12, '            return -1\n'],
            [229, 8, '        }\n'],
            [230, 4, '    }\n'],
            [231, 4, '    get_start_king(color) {\n'],
            [232, 8, '        """get starting position of king based off of color"""\n'],
            [233, 8, "        if (color == 'W') {\n"],
            [234, 12, '            return (5, 1)\n'],
            [235, 8, '        }\n'],
            [236, 8, "        else if (color == 'B') {\n"],
            [237, 12, '            return (5, 8)\n'],
            [238, 8, '        }\n'],
            [239, 8, '        else {\n'],
            [240, 12, "            print('error:invalid color')\n"],
            [241, 12, '            return -1\n'],
            [242, 8, '        }\n'],
            [243, 4, '    }\n'],
            [244, 4, '    update_rook_dict(rooks_moved) {\n'],
            [245, 8, '        """update rooks_moved dict to a new one"""\n'],
            [246, 8, '        this.rooks_moved = rooks_moved\n'],
            [247, 4, '    }\n'],
            [248, 4, '    queen_side_rook_moved(color) {\n'],
            [249, 8,
             '        """return true if the queen side rook of the given color has moved, otherwise false"""\n'],
            [250, 8, "        if (color == 'W') {\n"],
            [251, 12, '            return this.rooks_moved[(1, 1)]\n'],
            [252, 8, '        }\n'],
            [253, 8, "        else if (color == 'B') {\n"],
            [254, 12, '            return this.rooks_moved[(1, 8)]\n'],
            [255, 8, '        }\n'],
            [256, 4, '    }\n'],
            [257, 4, '    king_side_rook_moved(color) {\n'],
            [258, 8, '        """return true if the king side rook of the given color has moved, otherwise false"""\n'],
            [259, 8, "        if (color == 'W') {\n"],
            [260, 12, '            return this.rooks_moved[(8, 1)]\n'],
            [261, 8, '        }\n'],
            [262, 8, "        else if (color == 'B') {\n"],
            [263, 12, '            return this.rooks_moved[(8, 8)]\n'],
            [264, 8, '        }\n'],
            [265, 4, '    }\n'],
            [266, 4, '    __str__() {\n'],
            [267, 8, '        """called when object is argument to print"""\n'],
            [268, 8, '        let str_ = ""\n'],
            [269, 8, '        str_ += \'"rooks_moved": {\\n\'\n'],
            [270, 8, '        for (var k, v of this.rooks_moved.items()) {\n'],
            [271, 12, '            str_ += str(k)\n'],
            [272, 12, "            str_ += ':'\n"],
            [273, 12, '            str_ += str(v)\n'],
            [274, 12, "            str_ += '\\n'\n"],
            [275, 8, '        }\n'],
            [276, 8, "        str_ += '},\\n'\n"],
            [277, 8, '        str_ += \'"kings_moved": {\\n\'\n'],
            [278, 8, '        for (var k, v of this.kings_moved.items()) {\n'],
            [279, 12, '            str_ += str(k)\n'],
            [280, 12, "            str_ += ':'\n"],
            [281, 12, '            str_ += str(v)\n'],
            [282, 12, "            str_ += '\\n'\n"],
            [283, 8, '        }\n'],
            [284, 8, "        str_ += '},\\n'\n"],
            [285, 8, '        str_ += \'"pawn_histories": {\\n\'\n'],
            [286, 8, '        for (var k, v of this.pawn_histories.items()) {\n'],
            [287, 12, '            str_ += str(k)\n'],
            [288, 12, "            str_ += ':'\n"],
            [289, 12, '            str_ += str(v)\n'],
            [290, 12, "            str_ += '\\n'\n"],
            [291, 8, '        }\n'],
            [292, 8, "        str_ += '},\\n'\n"],
            [293, 8, "        str_ += 'last_pawn_move'\n"],
            [294, 8, "        str_ += ':'\n"],
            [295, 8, '        str_ += str(this.last_pawn_move)\n'],
            [296, 8, "        str_ += ',\\n'\n"],
            [297, 8, "        str_ += 'num_consecutive_non_pawn_moves'\n"],
            [298, 8, "        str_ += ':'\n"],
            [299, 8, '        str_ += str(this.num_consecutive_non_pawn_moves)\n'],
            [300, 8, "        str_ += ',\\n'\n"],
            [301, 8, "        str_ += 'game_status'\n"],
            [302, 8, "        str_ += ':'\n"],
            [303, 8, '        str_ += str(this.game_status)\n'],
            [304, 8, "        str_ += ',\\n'\n"],
            [305, 8, "        str_ += 'winner'\n"],
            [306, 8, "        str_ += ':'\n"],
            [307, 8, '        str_ += str(this.winner)\n'],
            [308, 8, "        str_ += ',\\n'\n"],
            [309, 8, '        return str_\n'],
            [310, 4, '    }\n'],
            [311, 0, '}\n'],
            [312, 0, 'if (__name__ == "__main__") {\n'],
            [313, 0, '}\n'],
            [314, 4, '    pass  # TODO: implement test\n'],
            [315, 1, '\n']
        ]
    print_list(refactor_in_operator(line_data))