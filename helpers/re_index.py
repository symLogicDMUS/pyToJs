from helpers.print_list import print_list


def re_index(line_data):
    """ """
    line_data_dict = {}
    for i in range(len(line_data)):
        line_data[i][0] = i
        line_data_dict[i] = line_data[i]
    return line_data_dict, line_data


if __name__ == "__main__":
    line_data = \
        [
            [0, 1, ' from coordType.to_xy import to_xy\n'],
            [1, 0, 'from coordType.to_rankfile import to_rankfile\n'],
            [2, 0, 'from getters.get_piece_type import get_piece_type\n'],
            [3, 0, 'from getters.get_piece_types import get_piece_types\n'],
            [4, 0, 'from misc.g_status_types import *\n'],
            [5, 0, 'from misc.JsonRecordError import JsonRecordError\n'],
            [6, 0, 'import json\n'],
            [7, 0, 'class JsonRecords(object):\n'],
            [8, 4, '    """contains info for new or saved game relevant to perfoming a castle or en_passant"""\n'],
            [9, 4, '    def __init__(self, file, board, j_records=None):\n'],
            [10, 8, '        if j_records is None:\n'],
            [11, 12, '            f = open(file, "r")\n'],
            [12, 12, '            json_data = f.read()\n'],
            [13, 12, '            records = json.loads(json_data)\n'],
            [14, 12, '            json.dumps(records, indent=4, sort_keys=False)\n'],
            [15, 12, '            f.close()\n'],
            [16, 0, '}\n'],
            [16, 8, '        else:\n'],
            [17, 12, '            records = j_records\n'],
            [18, 0, '}\n'],
            [18, 8, "        self.rooks_moved = records['rooks_moved']\n"],
            [19, 8, "        self.kings_moved = records['kings_moved']\n"],
            [20, 8, "        self.pawn_histories = records['pawn_histories']\n"],
            [21, 8, "        self.last_pawn_move = records['last_pawn_move']\n"],
            [22, 8, "        self.num_consecutive_non_pawn_moves = records['num_consecutive_non_pawn_moves']\n"],
            [23, 8, "        self.game_status = records['game_status']\n"],
            [24, 8, "        self.condition = records['condition']\n"],
            [25, 8, "        self.winner = records['winner']\n"],
            [26, 8, '        if j_records is None:\n'],
            [27, 12, '            self._init_pawn_ids(board, file=file)\n'],
            [28, 12, '            self._rankfile_to_tuple()\n'],
            [29, 0, '}\n'],
            [29, 8, '        else:\n'],
            [30, 12, '            self._rankfile_to_tuple(from_web=True)\n'],
            [31, 0, '}\n'],
            [31, 0, '}\n'],
            [31, 4, '    def _init_pawn_ids(self, board, file=""):\n'],
            [32, 8, '        """exchange the sqr that pawn started the game with, with the id for that pawn"""\n'],
            [33, 8, '        pawn_histories = {}\n'],
            [34, 8, '        for hist in self.pawn_histories.values():\n'],
            [35, 12, '            sqr1 = hist[-1]\n'],
            [36, 12, '            id_ = board[sqr1]\n'],
            [37, 12, '            pawn_histories[id_] = hist\n'],
            [38, 12, "            if get_piece_type(id_) != 'Pawn':\n"],
            [39, 16, '                print("ERROR: Pawn history not correct")\n'],
            [40, 16, '                print(file)\n'],
            [41, 16, '                print(sqr1)\n'],
            [42, 16, '                print(id_)\n'],
            [43, 16, '                raise JsonRecordError\n'],
            [44, 0, '}\n'],
            [44, 0, '}\n'],
            [44, 8, '        self.pawn_histories = pawn_histories\n'],
            [45, 0, '}\n'],
            [45, 4, '    def _init_pawn_locs(self):\n'],
            [46, 8,
             '        """swap the key of each pawn_history entry with the coordinate of its current location"""\n'],
            [47, 8, '        pawn_histories = {}\n'],
            [48, 8, '        for hist in self.pawn_histories.values():\n'],
            [49, 12, '            sqr = hist[-1]\n'],
            [50, 12, '            pawn_histories[sqr] = hist\n'],
            [51, 0, '}\n'],
            [51, 8, '        self.pawn_histories = pawn_histories\n'],
            [52, 0, '}\n'],
            [52, 4, '    def _rankfile_to_tuple(self, from_web=False):\n'],
            [53, 8, '        """convert the keys and ids for each type of record from a rankfile to a tuple"""\n'],
            [54, 8, '        rooks_moved = {}\n'],
            [55, 8, '        kings_moved = {}\n'],
            [56, 8, '        pawn_histories = {}\n'],
            [57, 8, '        last_pawn_move = None\n'],
            [58, 8, '        for rf in self.rooks_moved.keys():\n'],
            [59, 12, '            xy = to_xy(rf)\n'],
            [60, 12, '            rooks_moved[xy] = self.rooks_moved[rf]\n'],
            [61, 0, '}\n'],
            [61, 8, '        for rf in self.kings_moved.keys():\n'],
            [62, 12, '            xy = to_xy(rf)\n'],
            [63, 12, '            kings_moved[xy] = self.kings_moved[rf]\n'],
            [64, 0, '}\n'],
            [64, 8, '        if from_web:\n'],
            [65, 12, '            for id_ in self.pawn_histories.keys():\n'],
            [66, 16,
             '                self.pawn_histories[id_] = list(map(lambda li: to_xy(li), self.pawn_histories[id_]))\n'],
            [67, 0, '}\n'],
            [67, 0, '}\n'],
            [67, 8, '        else:\n'],
            [68, 12, '            for rf1 in self.pawn_histories.keys():\n'],
            [69, 16, '                xy1 = to_xy(rf1)\n'],
            [70, 16, '                pawn_histories[xy1] = []\n'],
            [71, 16, '                for rf2 in self.pawn_histories[rf1]:\n'],
            [72, 20, '                    xy2 = to_xy(rf2)\n'],
            [73, 20, '                    pawn_histories[xy1].append(xy2)\n'],
            [74, 0, '}\n'],
            [74, 0, '}\n'],
            [74, 0, '}\n'],
            [74, 8, '        self.rooks_moved = rooks_moved\n'],
            [75, 8, '        self.kings_moved = kings_moved\n'],
            [76, 8, '        self.pawn_histories = pawn_histories\n'],
            [77, 8, "        if self.last_pawn_move != 'None':\n"],
            [78, 12, '            self.last_pawn_move = to_xy(self.last_pawn_move)\n'],
            [79, 0, '}\n'],
            [79, 0, '}\n'],
            [79, 4, '    def _tuple_to_rankfile(self, for_web=False):\n'],
            [80, 8, '        """convert the keys and ids for each type of record from a tuple to a rankfile"""\n'],
            [81, 8, '        rooks_moved = {}\n'],
            [82, 8, '        kings_moved = {}\n'],
            [83, 8, '        pawn_histories = {}\n'],
            [84, 8, '        self._init_pawn_locs()\n'],
            [85, 8, '        for xy in self.rooks_moved.keys():\n'],
            [86, 12, '            rf = to_rankfile(xy)\n'],
            [87, 12, '            rooks_moved[rf] = self.rooks_moved[xy]\n'],
            [88, 0, '}\n'],
            [88, 8, '        for xy in self.kings_moved.keys():\n'],
            [89, 12, '            rf = to_rankfile(xy)\n'],
            [90, 12, '            kings_moved[rf] = self.kings_moved[xy]\n'],
            [91, 0, '}\n'],
            [91, 8, '        if for_web:\n'],
            [92, 12, '            for id_ in self.pawn_histories.keys():\n'],
            [93, 16,
             '                self.pawn_histories[id_] = list(map(lambda li: to_rankfile(li), self.pawn_histories[id_]))\n'],
            [94, 0, '}\n'],
            [94, 0, '}\n'],
            [94, 8, '        else:\n'],
            [95, 12, '            for xy1 in self.pawn_histories.keys():\n'],
            [96, 16, '                rf1 = to_rankfile(xy1)\n'],
            [97, 16, '                pawn_histories[rf1] = []\n'],
            [98, 16, '                for xy2 in self.pawn_histories[xy1]:\n'],
            [99, 20, '                    rf2 = to_rankfile(xy2)\n'],
            [100, 20, '                    pawn_histories[rf1].append(rf2)\n'],
            [101, 0, '}\n'],
            [101, 0, '}\n'],
            [101, 0, '}\n'],
            [101, 8, '        self.rooks_moved = rooks_moved\n'],
            [102, 8, '        self.kings_moved = kings_moved\n'],
            [103, 8, '        self.pawn_histories = pawn_histories\n'],
            [104, 8, "        if self.last_pawn_move != 'None':\n"],
            [105, 12, '            self.last_pawn_move = to_rankfile(self.last_pawn_move)\n'],
            [106, 0, '}\n'],
            [106, 0, '}\n'],
            [106, 4, '    def update_hist(self, id_, start, dest, promo_flag):\n'],
            [107, 8, '        """update json records depending on the piece type of id_ at location start"""\n'],
            [108, 8, '        p_type = get_piece_type(id_)\n'],
            [109, 8, '        if p_type != "Pawn":\n'],
            [110, 12, '            self.num_consecutive_non_pawn_moves += 1\n'],
            [111, 12, "            if p_type == 'Rook' and start in self.rooks_moved.keys():\n"],
            [112, 16, '                self.update_rooks_moved(start)\n'],
            [113, 0, '}\n'],
            [113, 12, "            elif p_type == 'King' and start in self.kings_moved.keys():\n"],
            [114, 16, '                self.update_kings_moved(start)\n'],
            [115, 0, '}\n'],
            [115, 0, '}\n'],
            [115, 8, '        else:\n'],
            [116, 12, '            self.reset_non_pawn_moves()\n'],
            [117, 12, '            self.last_pawn_move = dest\n'],
            [118, 12, '            self.update_pawn_history(id_, dest, promo_flag)\n'],
            [119, 0, '}\n'],
            [119, 8, '        return\n'],
            [120, 0, '}\n'],
            [120, 4, '    def update_state(self, board, ranges, enemy_color, npck):\n'],
            [121, 8, '        """\n'],
            [122, 9, '         update the status of the game: OVER or IN_PROGRESS\n'],
            [123, 9, "         update the winner of the game: 'w', 'b', or '-' (neither)\n"],
            [124, 9, "         udpate the condition of the enemy king: 'check', 'checkmate', 'stalemate', or 'safe'\n"],
            [125, 9, '         :param board: dict, game board\n'],
            [126, 9, '         :param npck: int, number of pieces checking the king\n'],
            [127, 9, '         :param ranges: dict, ranges of pieces of color\n'],
            [128, 9, '         :param enemy_color: str, color of king\n'],
            [129, 8, '        """\n'],
            [130, 8, '        if not any(ranges.values()):\n'],
            [131, 12, '            if npck > 0:\n'],
            [132, 16,
             "                self.condition, self.game_status, self.winner = 'checkmate', OVER, enemy_color\n"],
            [133, 0, '}\n'],
            [133, 12, '            else:\n'],
            [134, 16, "                self.condition, self.game_status, self.winner = 'stalemate', OVER, '-'\n"],
            [135, 0, '}\n'],
            [135, 12, '            return\n'],
            [136, 0, '}\n'],
            [136, 8, '        piece_types = get_piece_types(board)\n'],
            [137, 8,
             "        if piece_types in [['King', 'King'], ['Bishop', 'King', 'King'], ['King', 'King', 'Knight']]:\n"],
            [138, 12, "            self.condition, self.game_status, self.winner = 'stalemate', OVER, '-'\n"],
            [139, 0, '}\n'],
            [139, 8, '        elif npck > 0:\n'],
            [140, 12, "            self.condition, self.game_status, self.winner = 'check', IN_PROGRESS, '-'\n"],
            [141, 0, '}\n'],
            [141, 8, '        else:\n'],
            [142, 12, "            self.condition, self.game_status, self.winner = '', IN_PROGRESS, '-'\n"],
            [143, 0, '}\n'],
            [143, 0, '}\n'],
            [143, 4, '    def update_rooks_moved(self, sqr):\n'],
            [144, 8, '        """update rooks_moved because rook that start game at sqr has moved"""\n'],
            [145, 8, '        self.rooks_moved[sqr] = True\n'],
            [146, 0, '}\n'],
            [146, 4, '    def update_kings_moved(self, sqr):\n'],
            [147, 8, '        """update kings_moved because king that started game at sqr has moved"""\n'],
            [148, 8, '        self.kings_moved[sqr] = True\n'],
            [149, 0, '}\n'],
            [149, 4, '    def update_pawn_history(self, id_, new_loc, promo):\n'],
            [150, 8, '        """update location of pawn by appending its new location to its history"""\n'],
            [151, 8, '        if promo:\n'],
            [152, 12, '            del self.pawn_histories[id_]\n'],
            [153, 0, '}\n'],
            [153, 8, '        else:\n'],
            [154, 12, '            self.pawn_histories[id_].append(new_loc)\n'],
            [155, 0, '}\n'],
            [155, 0, '}\n'],
            [155, 4, '    def get_records(self, for_web=False):\n'],
            [156, 8, '        """return the json records as one python dict"""\n'],
            [157, 8, '        if for_web:\n'],
            [158, 12, '            self._tuple_to_rankfile(for_web=True)\n'],
            [159, 0, '}\n'],
            [159, 8, "        return {'rooks_moved': self.rooks_moved, 'kings_moved': self.kings_moved,\n"],
            [160, 16,
             "                'pawn_histories': self.pawn_histories, 'last_pawn_move': self.last_pawn_move,\n"],
            [161, 16, "                'num_consecutive_non_pawn_moves': self.num_consecutive_non_pawn_moves,\n"],
            [162, 16,
             "                'game_status': self.game_status, 'condition': self.condition, 'winner': self.winner}\n"],
            [163, 0, '}\n'],
            [163, 4, '    def reset_non_pawn_moves(self):\n'],
            [164, 8, '        """ a pawn has just moved, so reset number of consecutive non pawn moves to 0"""\n'],
            [165, 8, '        self.num_consecutive_non_pawn_moves = 0\n'],
            [166, 0, '}\n'],
            [166, 4, '    def delete_pawn(self, id):\n'],
            [167, 8, '        """delete pawn with id from pawn histories"""\n'],
            [168, 8, '        del self.pawn_histories[id]\n'],
            [169, 0, '}\n'],
            [169, 4, '    def has_king_moved(self, color):\n'],
            [170, 8, '        """return true/false of if the King of color has moved from its starting position"""\n'],
            [171, 8, "        if color == 'W':\n"],
            [172, 12, '            return self.kings_moved[(5, 1)]\n'],
            [173, 0, '}\n'],
            [173, 8, "        elif color == 'B':\n"],
            [174, 12, '            return self.kings_moved[(5, 8)]\n'],
            [175, 0, '}\n'],
            [175, 8, '        else:\n'],
            [176, 12, "            print('error: not a valid color\\n')\n"],
            [177, 12, '            return -1\n'],
            [178, 0, '}\n'],
            [178, 0, '}\n'],
            [178, 4, '    def get_start_king(self, color):\n'],
            [179, 8, '        """get starting position of king based off of color"""\n'],
            [180, 8, "        if color == 'W':\n"],
            [181, 12, '            return (5, 1)\n'],
            [182, 0, '}\n'],
            [182, 8, "        elif color == 'B':\n"],
            [183, 12, '            return (5, 8)\n'],
            [184, 0, '}\n'],
            [184, 8, '        else:\n'],
            [185, 12, "            print('error:invalid color')\n"],
            [186, 12, '            return -1\n'],
            [187, 0, '}\n'],
            [187, 0, '}\n'],
            [187, 4, '    def update_rook_dict(self, rooks_moved):\n'],
            [188, 8, '        """update rooks_moved dict to a new one"""\n'],
            [189, 8, '        self.rooks_moved = rooks_moved\n'],
            [190, 0, '}\n'],
            [190, 4, '    def queen_side_rook_moved(self, color):\n'],
            [191, 8,
             '        """return true if the queen side rook of the given color has moved, otherwise false"""\n'],
            [192, 8, "        if color == 'W':\n"],
            [193, 12, '            return self.rooks_moved[(1, 1)]\n'],
            [194, 0, '}\n'],
            [194, 8, "        elif color == 'B':\n"],
            [195, 12, '            return self.rooks_moved[(1, 8)]\n'],
            [196, 0, '}\n'],
            [196, 0, '}\n'],
            [196, 4, '    def king_side_rook_moved(self, color):\n'],
            [197, 8, '        """return true if the king side rook of the given color has moved, otherwise false"""\n'],
            [198, 8, "        if color == 'W':\n"],
            [199, 12, '            return self.rooks_moved[(8, 1)]\n'],
            [200, 0, '}\n'],
            [200, 8, "        elif color == 'B':\n"],
            [201, 12, '            return self.rooks_moved[(8, 8)]\n'],
            [202, 0, '}\n'],
            [202, 0, '}\n'],
            [202, 4, '    def __str__(self):\n'],
            [203, 8, '        """called when object is argument to print"""\n'],
            [204, 8, '        str_ = ""\n'],
            [205, 8, '        str_ += \'"rooks_moved": {\\n\'\n'],
            [206, 8, '        for k, v in self.rooks_moved.items():\n'],
            [207, 12, '            str_ += str(k)\n'],
            [208, 12, "            str_ += ':'\n"],
            [209, 12, '            str_ += str(v)\n'],
            [210, 12, "            str_ += '\\n'\n"],
            [211, 0, '}\n'],
            [211, 8, "        str_ += '},\\n'\n"],
            [212, 8, '        str_ += \'"kings_moved": {\\n\'\n'],
            [213, 8, '        for k, v in self.kings_moved.items():\n'],
            [214, 12, '            str_ += str(k)\n'],
            [215, 12, "            str_ += ':'\n"],
            [216, 12, '            str_ += str(v)\n'],
            [217, 12, "            str_ += '\\n'\n"],
            [218, 0, '}\n'],
            [218, 8, "        str_ += '},\\n'\n"],
            [219, 8, '        str_ += \'"pawn_histories": {\\n\'\n'],
            [220, 8, '        for k, v in self.pawn_histories.items():\n'],
            [221, 12, '            str_ += str(k)\n'],
            [222, 12, "            str_ += ':'\n"],
            [223, 12, '            str_ += str(v)\n'],
            [224, 12, "            str_ += '\\n'\n"],
            [225, 0, '}\n'],
            [225, 8, "        str_ += '},\\n'\n"],
            [226, 8, "        str_ += 'last_pawn_move'\n"],
            [227, 8, "        str_ += ':'\n"],
            [228, 8, '        str_ += str(self.last_pawn_move)\n'],
            [229, 8, "        str_ += ',\\n'\n"],
            [230, 8, "        str_ += 'num_consecutive_non_pawn_moves'\n"],
            [231, 8, "        str_ += ':'\n"],
            [232, 8, '        str_ += str(self.num_consecutive_non_pawn_moves)\n'],
            [233, 8, "        str_ += ',\\n'\n"],
            [234, 8, "        str_ += 'game_status'\n"],
            [235, 8, "        str_ += ':'\n"],
            [236, 8, '        str_ += str(self.game_status)\n'],
            [237, 8, "        str_ += ',\\n'\n"],
            [238, 8, "        str_ += 'winner'\n"],
            [239, 8, "        str_ += ':'\n"],
            [240, 8, '        str_ += str(self.winner)\n'],
            [241, 8, "        str_ += ',\\n'\n"],
            [242, 8, '        return str_\n'],
            [243, 0, '}\n'],
            [243, 0, '}\n'],
            [243, 0, 'if __name__ == "__main__":\n'],
            [244, 0, '}\n'],
            [244, 4, '    pass  # TODO: implement test\n']
        ]
    line_data_dict, line_data = re_index(line_data)
    print_list(line_data)

