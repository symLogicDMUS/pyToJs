import re
from helpers.get_triple_quote_index_pairs import get_triple_quote_index_pairs
from helpers.print_list import print_list


def refactor_doc_strings(line_data):
    """ """
    for i in range(len(line_data)):
        if re.search(r'"""(.*)"""', line_data[i][2]) is not None:
            line = re.search(r'"""(.*)"""', line_data[i][2]).group()
            doc = re.search(r'"""(.*)"""', line_data[i][2]).group(1)
            line_data[i][2] = line_data[i][2].replace(line,  "/*{}**/".format(doc))
    triple_quote_index_pairs = get_triple_quote_index_pairs(line_data)
    for indexs in triple_quote_index_pairs:
        line_data[indexs[0]][2] = line_data[indexs[0]][2].replace('"""', '/**')
        line_data[indexs[1]][2] = line_data[indexs[1]][2].replace('"""', '*/')
    return line_data


if __name__ == "__main__":
    line_data = \
        [
            [0, 1, ' from coordType.to_xy import to_xy\n'],
            [1, 0, 'import { to_rankfile } from "coordType/to_rankfile";\n'],
            [2, 0, 'import { get_piece_type } from "getters/get_piece_type";\n'],
            [3, 0, 'import { get_piece_types } from "getters/get_piece_types";\n'],
            [4, 0, 'import { * } from "misc/g_status_types";\n'],
            [5, 0, 'import { JsonRecordError } from "misc/JsonRecordError";\n'],
            [6, 0, 'import "json";\n'],
            [7, 0, 'export class JsonRecords(object) {\n'],
            [8, 4, '    """contains info for new or saved game relevant to perfoming a castle or en_passant"""\n'],
            [9, 4, '    constructor(file, board, j_records=None) {\n'],
            [10, 8, '        if (j_records is None) {\n'],
            [11, 12, '            let f = open(file, "r")\n'],
            [12, 12, '            let json_data = f.read()\n'],
            [13, 12, '            let records = json.loads(json_data)\n'],
            [14, 12, '            json.dumps(records, indent=4, sort_keys=False)\n'],
            [15, 12, '            f.close()\n'],
            [16, 8, '        }\n'],
            [17, 8, '        else {\n'],
            [18, 12, '            records = j_records\n'],
            [19, 8, '        }\n'],
            [20, 8, "        this.rooks_moved = records['rooks_moved']\n"],
            [21, 8, "        this.kings_moved = records['kings_moved']\n"],
            [22, 8, "        this.pawn_histories = records['pawn_histories']\n"],
            [23, 8, "        this.last_pawn_move = records['last_pawn_move']\n"],
            [24, 8, "        this.num_consecutive_non_pawn_moves = records['num_consecutive_non_pawn_moves']\n"],
            [25, 8, "        this.game_status = records['game_status']\n"],
            [26, 8, "        this.condition = records['condition']\n"],
            [27, 8, "        this.winner = records['winner']\n"],
            [28, 8, '        if (j_records is None) {\n'],
            [29, 12, '            this._init_pawn_ids(board, file=file)\n'],
            [30, 12, '            this._rankfile_to_tuple()\n'],
            [31, 8, '        }\n'],
            [32, 8, '        else {\n'],
            [33, 12, '            this._rankfile_to_tuple(from_web=True)\n'],
            [34, 8, '        }\n'],
            [35, 4, '    }\n'],
            [36, 4, '    _init_pawn_ids(board, file="") {\n'],
            [37, 8, '        """exchange the sqr that pawn started the game with, with the id for that pawn"""\n'],
            [38, 8, '        pawn_histories = {}\n'],
            [39, 8, '        for (var hist of this.pawn_histories.values()) {\n'],
            [40, 12, '            let sqr1 = hist[-1]\n'],
            [41, 12, '            let id_ = board[sqr1]\n'],
            [42, 12, '            pawn_histories[id_] = hist\n'],
            [43, 12, "            if (get_piece_type(id_) != 'Pawn') {\n"],
            [44, 16, '                print("ERROR: Pawn history not correct")\n'],
            [45, 16, '                print(file)\n'],
            [46, 16, '                print(sqr1)\n'],
            [47, 16, '                print(id_)\n'],
            [48, 16, '                raise JsonRecordError\n'],
            [49, 12, '            }\n'],
            [50, 8, '        }\n'],
            [51, 8, '        this.pawn_histories = pawn_histories\n'],
            [52, 4, '    }\n'],
            [53, 4, '    _init_pawn_locs() {\n'],
            [54, 8,
             '        """swap the key of each pawn_history entry with the coordinate of its current location"""\n'],
            [55, 8, '        pawn_histories = {}\n'],
            [56, 8, '        for (var hist of this.pawn_histories.values()) {\n'],
            [57, 12, '            let sqr = hist[-1]\n'],
            [58, 12, '            pawn_histories[sqr] = hist\n'],
            [59, 8, '        }\n'],
            [60, 8, '        this.pawn_histories = pawn_histories\n'],
            [61, 4, '    }\n'],
            [62, 4, '    _rankfile_to_tuple(from_web=False) {\n'],
            [63, 8, '        """convert the keys and ids for each type of record from a rankfile to a tuple"""\n'],
            [64, 8, '        rooks_moved = {}\n'],
            [65, 8, '        kings_moved = {}\n'],
            [66, 8, '        pawn_histories = {}\n'],
            [67, 8, '        last_pawn_move = None\n'],
            [68, 8, '        for (var rf of this.rooks_moved.keys()) {\n'],
            [69, 12, '            let xy = to_xy(rf)\n'],
            [70, 12, '            rooks_moved[xy] = this.rooks_moved[rf]\n'],
            [71, 8, '        }\n'],
            [72, 8, '        for (var rf of this.kings_moved.keys()) {\n'],
            [73, 12, '            xy = to_xy(rf)\n'],
            [74, 12, '            kings_moved[xy] = this.kings_moved[rf]\n'],
            [75, 8, '        }\n'],
            [76, 8, '        if (from_web) {\n'],
            [77, 12, '            for (var id_ of this.pawn_histories.keys()) {\n'],
            [78, 16,
             '                this.pawn_histories[id_] = list(map(lambda li: to_xy(li), this.pawn_histories[id_]))\n'],
            [79, 12, '            }\n'],
            [80, 8, '        }\n'],
            [81, 8, '        else {\n'],
            [82, 12, '            for (var rf1 of this.pawn_histories.keys()) {\n'],
            [83, 16, '                let xy1 = to_xy(rf1)\n'],
            [84, 16, '                pawn_histories[xy1] = []\n'],
            [85, 16, '                for (var rf2 of this.pawn_histories[rf1]) {\n'],
            [86, 20, '                    let xy2 = to_xy(rf2)\n'],
            [87, 20, '                    pawn_histories[xy1].append(xy2)\n'],
            [88, 16, '                }\n'],
            [89, 12, '            }\n'],
            [90, 8, '        }\n'],
            [91, 8, '        this.rooks_moved = rooks_moved\n'],
            [92, 8, '        this.kings_moved = kings_moved\n'],
            [93, 8, '        this.pawn_histories = pawn_histories\n'],
            [94, 8, "        if (this.last_pawn_move != 'None') {\n"],
            [95, 12, '            this.last_pawn_move = to_xy(this.last_pawn_move)\n'],
            [96, 8, '        }\n'],
            [97, 4, '    }\n'],
            [98, 4, '    _tuple_to_rankfile(for_web=False) {\n'],
            [99, 8, '        """convert the keys and ids for each type of record from a tuple to a rankfile"""\n'],
            [100, 8, '        rooks_moved = {}\n'],
            [101, 8, '        kings_moved = {}\n'],
            [102, 8, '        pawn_histories = {}\n'],
            [103, 8, '        this._init_pawn_locs()\n'],
            [104, 8, '        for (var xy of this.rooks_moved.keys()) {\n'],
            [105, 12, '            let rf = to_rankfile(xy)\n'],
            [106, 12, '            rooks_moved[rf] = this.rooks_moved[xy]\n'],
            [107, 8, '        }\n'],
            [108, 8, '        for (var xy of this.kings_moved.keys()) {\n'],
            [109, 12, '            rf = to_rankfile(xy)\n'],
            [110, 12, '            kings_moved[rf] = this.kings_moved[xy]\n'],
            [111, 8, '        }\n'],
            [112, 8, '        if (for_web) {\n'],
            [113, 12, '            for (var id_ of this.pawn_histories.keys()) {\n'],
            [114, 16,
             '                this.pawn_histories[id_] = list(map(lambda li: to_rankfile(li), this.pawn_histories[id_]))\n'],
            [115, 12, '            }\n'],
            [116, 8, '        }\n'],
            [117, 8, '        else {\n'],
            [118, 12, '            for (var xy1 of this.pawn_histories.keys()) {\n'],
            [119, 16, '                let rf1 = to_rankfile(xy1)\n'],
            [120, 16, '                pawn_histories[rf1] = []\n'],
            [121, 16, '                for (var xy2 of this.pawn_histories[xy1]) {\n'],
            [122, 20, '                    let rf2 = to_rankfile(xy2)\n'],
            [123, 20, '                    pawn_histories[rf1].append(rf2)\n'],
            [124, 16, '                }\n'],
            [125, 12, '            }\n'],
            [126, 8, '        }\n'],
            [127, 8, '        this.rooks_moved = rooks_moved\n'],
            [128, 8, '        this.kings_moved = kings_moved\n'],
            [129, 8, '        this.pawn_histories = pawn_histories\n'],
            [130, 8, "        if (this.last_pawn_move != 'None') {\n"],
            [131, 12, '            this.last_pawn_move = to_rankfile(this.last_pawn_move)\n'],
            [132, 8, '        }\n'],
            [133, 4, '    }\n'],
            [134, 4, '    update_hist(id_, start, dest, promo_flag) {\n'],
            [135, 8, '        """update json records depending on the piece type of id_ at location start"""\n'],
            [136, 8, '        let p_type = get_piece_type(id_)\n'],
            [137, 8, '        if (p_type != "Pawn") {\n'],
            [138, 12, '            this.num_consecutive_non_pawn_moves += 1\n'],
            [139, 12, "            if (p_type == 'Rook' and start in this.rooks_moved.keys()) {\n"],
            [140, 16, '                this.update_rooks_moved(start)\n'],
            [141, 12, '            }\n'],
            [142, 12, "            else if (p_type == 'King' and start in this.kings_moved.keys()) {\n"],
            [143, 16, '                this.update_kings_moved(start)\n'],
            [144, 12, '            }\n'],
            [145, 8, '        }\n'],
            [146, 8, '        else {\n'],
            [147, 12, '            this.reset_non_pawn_moves()\n'],
            [148, 12, '            this.last_pawn_move = dest\n'],
            [149, 12, '            this.update_pawn_history(id_, dest, promo_flag)\n'],
            [150, 8, '        }\n'],
            [151, 8, '        return\n'],
            [152, 4, '    }\n'],
            [153, 4, '    update_state(board, ranges, enemy_color, npck) {\n'],
            [154, 8, '        """\n'],
            [155, 9, '         update the status of the game: OVER or IN_PROGRESS\n'],
            [156, 9, "         update the winner of the game: 'w', 'b', or '-' (neither)\n"],
            [157, 9, "         udpate the condition of the enemy king: 'check', 'checkmate', 'stalemate', or 'safe'\n"],
            [158, 9, '         :param board: dict, game board\n'],
            [159, 9, '         :param npck: int, number of pieces checking the king\n'],
            [160, 9, '         :param ranges: dict, ranges of pieces of color\n'],
            [161, 9, '         :param enemy_color: str, color of king\n'],
            [162, 8, '        """\n'],
            [163, 8, '        if (not any(ranges.values())) {\n'],
            [164, 12, '            if (npck > 0) {\n'],
            [165, 16,
             "                this.condition, this.game_status, this.winner = 'checkmate', OVER, enemy_color\n"],
            [166, 12, '            }\n'],
            [167, 12, '            else {\n'],
            [168, 16, "                this.condition, this.game_status, this.winner = 'stalemate', OVER, '-'\n"],
            [169, 12, '            }\n'],
            [170, 12, '            return\n'],
            [171, 8, '        }\n'],
            [172, 8, '        let piece_types = get_piece_types(board)\n'],
            [173, 8,
             "        if (piece_types in [['King', 'King'], ['Bishop', 'King', 'King'], ['King', 'King', 'Knight']]) {\n"],
            [174, 12, "            this.condition, this.game_status, this.winner = 'stalemate', OVER, '-'\n"],
            [175, 8, '        }\n'],
            [176, 8, '        else if (npck > 0) {\n'],
            [177, 12, "            this.condition, this.game_status, this.winner = 'check', IN_PROGRESS, '-'\n"],
            [178, 8, '        }\n'],
            [179, 8, '        else {\n'],
            [180, 12, "            this.condition, this.game_status, this.winner = '', IN_PROGRESS, '-'\n"],
            [181, 8, '        }\n'],
            [182, 4, '    }\n'],
            [183, 4, '    update_rooks_moved(sqr) {\n'],
            [184, 8, '        """update rooks_moved because rook that start game at sqr has moved"""\n'],
            [185, 8, '        this.rooks_moved[sqr] = True\n'],
            [186, 4, '    }\n'],
            [187, 4, '    update_kings_moved(sqr) {\n'],
            [188, 8, '        """update kings_moved because king that started game at sqr has moved"""\n'],
            [189, 8, '        this.kings_moved[sqr] = True\n'],
            [190, 4, '    }\n'],
            [191, 4, '    update_pawn_history(id_, new_loc, promo) {\n'],
            [192, 8, '        """update location of pawn by appending its new location to its history"""\n'],
            [193, 8, '        if (promo) {\n'],
            [194, 12, '            del this.pawn_histories[id_]\n'],
            [195, 8, '        }\n'],
            [196, 8, '        else {\n'],
            [197, 12, '            this.pawn_histories[id_].append(new_loc)\n'],
            [198, 8, '        }\n'],
            [199, 4, '    }\n'],
            [200, 4, '    get_records(for_web=False) {\n'],
            [201, 8, '        """return the json records as one python dict"""\n'],
            [202, 8, '        if (for_web) {\n'],
            [203, 12, '            this._tuple_to_rankfile(for_web=True)\n'],
            [204, 8, '        }\n'],
            [205, 8, "        return {'rooks_moved': this.rooks_moved, 'kings_moved': this.kings_moved,\n"],
            [206, 16,
             "                'pawn_histories': this.pawn_histories, 'last_pawn_move': this.last_pawn_move,\n"],
            [207, 16, "                'num_consecutive_non_pawn_moves': this.num_consecutive_non_pawn_moves,\n"],
            [208, 16,
             "                'game_status': this.game_status, 'condition': this.condition, 'winner': this.winner}\n"],
            [209, 4, '    }\n'],
            [210, 4, '    reset_non_pawn_moves() {\n'],
            [211, 8, '        """ a pawn has just moved, so reset number of consecutive non pawn moves to 0"""\n'],
            [212, 8, '        this.num_consecutive_non_pawn_moves = 0\n'],
            [213, 4, '    }\n'],
            [214, 4, '    delete_pawn(id) {\n'],
            [215, 8, '        """delete pawn with id from pawn histories"""\n'],
            [216, 8, '        del this.pawn_histories[id]\n'],
            [217, 4, '    }\n'],
            [218, 4, '    has_king_moved(color) {\n'],
            [219, 8, '        """return true/false of if the King of color has moved from its starting position"""\n'],
            [220, 8, "        if (color == 'W') {\n"],
            [221, 12, '            return this.kings_moved[(5, 1)]\n'],
            [222, 8, '        }\n'],
            [223, 8, "        else if (color == 'B') {\n"],
            [224, 12, '            return this.kings_moved[(5, 8)]\n'],
            [225, 8, '        }\n'],
            [226, 8, '        else {\n'],
            [227, 12, "            print('error: not a valid color\\n')\n"],
            [228, 12, '            return -1\n'],
            [229, 8, '        }\n'],
            [230, 4, '    }\n'],
            [231, 4, '    get_start_king(color) {\n'],
            [232, 8, '        """get starting position of king based off of color"""\n'],
            [233, 8, "        if (color == 'W') {\n"],
            [234, 12, '            return (5, 1)\n'],
            [235, 8, '        }\n'],
            [236, 8, "        else if (color == 'B') {\n"],
            [237, 12, '            return (5, 8)\n'],
            [238, 8, '        }\n'],
            [239, 8, '        else {\n'],
            [240, 12, "            print('error:invalid color')\n"],
            [241, 12, '            return -1\n'],
            [242, 8, '        }\n'],
            [243, 4, '    }\n'],
            [244, 4, '    update_rook_dict(rooks_moved) {\n'],
            [245, 8, '        """update rooks_moved dict to a new one"""\n'],
            [246, 8, '        this.rooks_moved = rooks_moved\n'],
            [247, 4, '    }\n'],
            [248, 4, '    queen_side_rook_moved(color) {\n'],
            [249, 8,
             '        """return true if the queen side rook of the given color has moved, otherwise false"""\n'],
            [250, 8, "        if (color == 'W') {\n"],
            [251, 12, '            return this.rooks_moved[(1, 1)]\n'],
            [252, 8, '        }\n'],
            [253, 8, "        else if (color == 'B') {\n"],
            [254, 12, '            return this.rooks_moved[(1, 8)]\n'],
            [255, 8, '        }\n'],
            [256, 4, '    }\n'],
            [257, 4, '    king_side_rook_moved(color) {\n'],
            [258, 8, '        """return true if the king side rook of the given color has moved, otherwise false"""\n'],
            [259, 8, "        if (color == 'W') {\n"],
            [260, 12, '            return this.rooks_moved[(8, 1)]\n'],
            [261, 8, '        }\n'],
            [262, 8, "        else if (color == 'B') {\n"],
            [263, 12, '            return this.rooks_moved[(8, 8)]\n'],
            [264, 8, '        }\n'],
            [265, 4, '    }\n'],
            [266, 4, '    __str__() {\n'],
            [267, 8, '        """called when object is argument to print"""\n'],
            [268, 8, '        let str_ = ""\n'],
            [269, 8, '        str_ += \'"rooks_moved": {\\n\'\n'],
            [270, 8, '        for (var k, v of this.rooks_moved.items()) {\n'],
            [271, 12, '            str_ += str(k)\n'],
            [272, 12, "            str_ += ':'\n"],
            [273, 12, '            str_ += str(v)\n'],
            [274, 12, "            str_ += '\\n'\n"],
            [275, 8, '        }\n'],
            [276, 8, "        str_ += '},\\n'\n"],
            [277, 8, '        str_ += \'"kings_moved": {\\n\'\n'],
            [278, 8, '        for (var k, v of this.kings_moved.items()) {\n'],
            [279, 12, '            str_ += str(k)\n'],
            [280, 12, "            str_ += ':'\n"],
            [281, 12, '            str_ += str(v)\n'],
            [282, 12, "            str_ += '\\n'\n"],
            [283, 8, '        }\n'],
            [284, 8, "        str_ += '},\\n'\n"],
            [285, 8, '        str_ += \'"pawn_histories": {\\n\'\n'],
            [286, 8, '        for (var k, v of this.pawn_histories.items()) {\n'],
            [287, 12, '            str_ += str(k)\n'],
            [288, 12, "            str_ += ':'\n"],
            [289, 12, '            str_ += str(v)\n'],
            [290, 12, "            str_ += '\\n'\n"],
            [291, 8, '        }\n'],
            [292, 8, "        str_ += '},\\n'\n"],
            [293, 8, "        str_ += 'last_pawn_move'\n"],
            [294, 8, "        str_ += ':'\n"],
            [295, 8, '        str_ += str(this.last_pawn_move)\n'],
            [296, 8, "        str_ += ',\\n'\n"],
            [297, 8, "        str_ += 'num_consecutive_non_pawn_moves'\n"],
            [298, 8, "        str_ += ':'\n"],
            [299, 8, '        str_ += str(this.num_consecutive_non_pawn_moves)\n'],
            [300, 8, "        str_ += ',\\n'\n"],
            [301, 8, "        str_ += 'game_status'\n"],
            [302, 8, "        str_ += ':'\n"],
            [303, 8, '        str_ += str(this.game_status)\n'],
            [304, 8, "        str_ += ',\\n'\n"],
            [305, 8, "        str_ += 'winner'\n"],
            [306, 8, "        str_ += ':'\n"],
            [307, 8, '        str_ += str(this.winner)\n'],
            [308, 8, "        str_ += ',\\n'\n"],
            [309, 8, '        return str_\n'],
            [310, 4, '    }\n'],
            [311, 0, '}\n'],
            [312, 0, 'if (__name__ == "__main__") {\n'],
            [313, 0, '}\n'],
            [314, 4, '    pass  # TODO: implement test\n'],
            [315, 1, '\n']
        ]
    line_data2 = \
        [
            [0, 0, 'import { * } from "sympy";\n'],
            [1, 0, 'import "pygame";\n'],
            [2, 0, 'import { pprint } from "pprint";\n'],
            [3, 0, 'import "copy";\n'],
            [4, 0, 'import "os";\n'],
            [5, 0, 'import "io";\n'],
            [6, 0, 'import { randint } from "random";\n'],
            [7, 0, 'import { Image } from "PIL";\n'],
            [8, 0, 'import "matplotlib/pyplot";\n'],
            [9, 0, 'import { Path } from "pathlib";\n'],
            [10, 0, 'import "random";\n'],
            [11, 0, 'let imageTable = {}\n'],
            [12, 0, 'let _uniqueIDlet s = []\n'],
            [13, 0, 'let bossPurple = (145, 67, 200)\n'],
            [14, 0, 'let display_width = 1000\n'],
            [15, 0, 'display_heighlet t = 1000\n'],
            [16, 0, "let operatorList = ['+', '*', '-', '/', '**', '=']\n"],
            [17, 0, 'export class Route {\n'],
            [18, 4, '    constructor(direction, dest) {\n'],
            [19, 8, '        s = this\n'],
            [20, 8, '        s.let direction = direction\n'],
            [21, 8, '        s.let dest = dest\n'],
            [22, 4, '    }\n'],
            [23, 0, '}\n'],
            [24, 0, 'export class Operator(pygame.sprite.Sprite) {\n'],
            [25, 4, '    constructor(opString) {\n'],
            [26, 8, '        pygame.sprite.Sprite.__init__(this)\n'],
            [27, 8, '        s = this\n'],
            [28, 8, '        s.let node = opString\n'],
            [29, 8, '        export function loadOpImage(opString) {\n'],
            [30, 12, '            """\n'],
            [31, 0, 'export             Operator class method intrnal to constructor\n'],
            [32, 0, 'export             all operator images are saved at begining of program, so class \n'],
            [33, 12, '            only needs to load operator image (not save).\n'],
            [34, 12, '            """\n'],
            [35, 12, '            let imageFilePath = imageTable[opString]\n'],
            [36, 12, '            return pygame.image.load(imageTable[opString])\n'],
            [37, 8, '        }\n'],
            [38, 8, '        if (s.node == None) {\n'],
            [39, 12, '            s.let image = None\n'],
            [40, 8, '        }\n'],
            [41, 8, '        else {\n'],
            [42, 12, '            s.image = loadOpImage(opString)\n'],
            [43, 12, '            s.let rect = s.image.get_rect()\n'],
            [44, 8, '        }\n'],
            [45, 4, '    }\n'],
            [46, 4, '    __repr__() {\n'],
            [47, 8, "        return 'Operator({}) centerx: {}'.format(str(this.node), this.rect.centerx)\n"],
            [48, 4, '    }\n'],
            [49, 4, '    __str__() {\n'],
            [50, 8, '        return this.__repr__()\n'],
            [51, 4, '    }\n'],
            [52, 4, '    update(code_str, *args) {\n'],
            [53, 8, '        """\n'],
            [54, 8, '        """\n'],
            [55, 8, '        s = this\n'],
            [56, 8, '        exec(code_str)\n'],
            [57, 8, '        return\n'],
            [58, 4, '    }\n'],
            [59, 4, '    position(pos, rectKeyword) {\n'],
            [60, 8, '        """\n'],
            [61, 8, "        argument parameter 'pos' is a tuple.\n"],
            [62, 8, '        if no rectKeyword then the elements of tuple are x and y coordinates,\n'],
            [63, 8, '        otherwise use rectKeyword as the keyword argument in get_rect() function\n'],
            [64, 8, '        call.\n'],
            [65, 8, '        """\n'],
            [66, 8, '        if (rectKeyword == None) {\n'],
            [67, 12, '            x, let y = pos[0], pos[1]\n'],
            [68, 12, '            this.rect = this.image.get_rect()\n'],
            [69, 12, '            this.rect.let centerx = x\n'],
            [70, 12, '            this.rect.centerx = y\n'],
            [71, 8, '        }\n'],
            [72, 8, '        else {\n'],
            [73, 12, "            exec('this.rect = this.image.get_rect({}={})'.format(rectKeyword, pos))\n"],
            [74, 8, '        }\n'],
            [75, 4, '    }\n'],
            [76, 4, '    # position(pos) {\n'],
            [77, 4, '    #    """\n'],
            [78, 4, '    #    """\n'],
            [79, 4, '    #    this.rect = this.image.get_rect(center=pos)\n'],
            [80, 4, '    get_x_dist_apart(leaderX) {\n'],
            [81, 8, '        """\n'],
            [82, 8, '        return the x distance between the parameter passed in, and the centerx\n'],
            [83, 8, '        coordinate of this.rect\n'],
            [84, 8, '        """\n'],
            [85, 8, '        return this.rect.centerx - leaderX\n'],
            [86, 4, '    }\n'],
            [87, 4, '    set_x_dist_to_trav_rel_lead(x_dist, x_dest) {\n'],
            [88, 8, '        """\n'],
            [89, 8, '        see followTheLeader method.\n'],
            [90, 8, "        x_dest: leader's destinataion\n"],
            [91, 8, '        x_dist: distance between this and leader\n'],
            [92, 8, '        this.x_dist_to_trav_rel_lead is x destination relative to the leader\n'],
            [93, 8, '        """\n'],
            [94, 8, '        s = this\n'],
            [95, 8, '        s.let x_dist_to_trav_rel_lead = x_dest - x_dist\n'],
            [96, 4, '    }\n'],
            [97, 0, '}\n'],
            [98, 0, 'export function getOpStr(sympyObj) {\n'],
            [99, 4, '    """\n'],
            [100, 4, '    """\n'],
            [101, 4, '    if (sympyObj.is_Add) {\n'],
            [102, 8, "        return '+'\n"],
            [103, 4, '    }\n'],
            [104, 4, '    else if (sympyObj.is_Mul) {\n'],
            [105, 8, "        return '*'\n"],
            [106, 4, '    }\n'],
            [107, 4, '    else if (sympyObj.is_Rational) {\n'],
            [108, 8, "        return '/'\n"],
            [109, 4, '    }\n'],
            [110, 4, '    else if (sympyObj.is_Pow) {\n'],
            [111, 8, "        return '**'\n"],
            [112, 4, '    }\n'],
            [113, 0, '}\n'],
            [114, 0, 'export function saveOperatorImage(op) {\n'],
            [115, 4, '    """\n'],
            [116, 4, '    (#1): create the entry\n'],
            [117, 4, '    (#2): value of the dict entry is an file path to a image where the \n'],
            [118, 10, '          name of the image is the id of the dict entry\n'],
            [119, 4, '    (#3): image is created\n'],
            [120, 4, '    (#4): image object is loaded in from pic specified in dict\n'],
            [121, 4, '    (#5): the image was already put in the table, so simply upload it.\n'],
            [122, 4, '    """\n'],
            [123, 4, '    export function _saveOperatorImage(strOp) {\n'],
            [124, 8, '        """\n'],
            [125, 8, '        modified from:\n'],
            [126, 8,
             '        https://stackoverflow.com/questions/36191953/matplotlib-save-only-text-without-whitespace \n'],
            [127, 8, '        author: martain evans\n'],
            [128, 8, '        (#6): here we are getting text of current operator in Latex form\n'],
            [129, 8, '        (#7): create a matplotlib figure (window pops up)\n'],
            [130, 8, '        (#8): draw the Latex on the figure at the specified coordinates\n'],
            [131, 8, '        (#9): initially the figure has white background\n'],
            [132, 8, '        (#10) { an xy plane is shown by export functionault, turn it off\n'],
            [133, 8, '        (#11): make text fit inside the figure\n'],
            [134, 8, '        """\n'],
            [135, 8, '        let lat = latex(op)\n'],
            [136, 8, '        let fig = plt.figure()\n'],
            [137, 8, '        t = plt.text(0.001, 0.001, r"$%s$" % lat, fontsize=30)  # 8\n'],
            [138, 8, "        fig.patch.set_facecolor('white')  # 9\n"],
            [139, 8, "        plt.axis('off')  # 10\n"],
            [140, 8, '        plt.tight_layout()  # 11\n'],
            [141, 8, '        with io.BytesIO() as png_buf:\n'],
            [142, 12, "            plt.savefig(png_buf, transparent=True, bbox_inches='tight', pad_inches=0)\n"],
            [143, 12, '            png_buf.seek(0)\n'],
            [144, 12, '            image = Image.open(png_buf)\n'],
            [145, 12, '            image.load()\n'],
            [146, 12, '            let inverted_image = ImageOps.invert(image.convert("RGB"))\n'],
            [147, 12, '            let cropped = image.crop(inverted_image.getbbox())\n'],
            [148, 12, '            cropped.save(imageTable[strOp])\n'],
            [149, 4, '    }\n'],
            [150, 4, '    if (str(op) not in imageTable.keys()) {\n'],
            [151, 8, '        let id_ = random.randint(10000, 99999)  # 1 is lowest number\n'],
            [152, 8, '        while (id_ in _uniqueIDs) {\n'],
            [153, 12, '            id_ = random.randint(10000, 99999)  # 1 is lowest number\n'],
            [154, 8, '        }\n'],
            [155, 8, '        imageTable[str(op)] = "uniqueSyms/{}.png".format(str(id_))  # 2\n'],
            [156, 8, '        _saveOperatorImage(str(op))  # 3\n'],
            [157, 4, '    }\n'],
            [158, 4, '    return\n'],
            [159, 0, '}\n'],
            [160, 0, 'export function mkDirUniqueSyms(dirName) {\n'],
            [161, 4, '    """\n'],
            [162, 4, '    makes directory named uniqueSyms that contains subdirectories each with a \n'],
            [163, 4, '    sympy image\n'],
            [164, 4, '    """\n'],
            [165, 4, "    os.mkdir('uniqueSyms')\n"],
            [166, 0, '}\n'],
            [167, 0, 'export class Root(pygame.sprite.Sprite) {\n'],
            [168, 4, '    constructor(expr, operator=None) {\n'],
            [169, 8, '        export function buildGroups() {\n'],
            [170, 12, '            """\n'],
            [171, 0, 'export             method internal to Root class constructor.\n'],
            [172, 12, '            Every node n in the tree does a depth first traversal of the\n'],
            [173, 12, '            subtree where n is root. every node n calls the buildSpriteGroup()\n'],
            [174, 12, '            method of each of its children. leaf nodes buildSpriteGroup() method\n'],
            [175, 12, '            return a list of lenght 1 holding a reference to themthis as soon \n'],
            [176, 12, '            as the method is entered. n that are non-leaf nodes return a list \n'],
            [177, 12, '            consisting of:\n'],
            [178, 12, "            a. everything that each of n's child returned.\n"],
            [179, 12, '            b. the operator attribute of n appearing the\n'],
            [180, 15, '               right number of times.\n'],
            [181, 15, '               ex: 2*4*x \n'],
            [182, 15, '               returns [Node(4), Node(2), Node(x), Operator(*), Operator(*)]\n'],
            [183, 12, '            """\n'],
            [184, 12, '            s.exprTree.buildSpriteGroup()\n'],
            [185, 8, '        }\n'],
            [186, 8, '        export function oraganizeGroups() {\n'],
            [187, 12, '            s.exprTree.organizeGroup()\n'],
            [188, 8, '        }\n'],
            [189, 8, '        # __init__ attributes:\n'],
            [190, 8, '        pygame.sprite.Sprite.__init__(this)\n'],
            [191, 8, '        s = this\n'],
            [192, 8, '        s.let expr = expr\n'],
            [193, 8, '        s.let exprTree = Node(expr, this)\n'],
            [194, 8, '        s.let actionList = []\n'],
            [195, 8, '        buildGroups()\n'],
            [196, 8,
             '        # note Root object does not need its own OrderedUpdates attribute unless it is an operation\n'],
            [197, 8, '        # get every leaf in exprTree sprite group it to operation, along with operator\n'],
            [198, 8, '        if (operator != None) {\n'],
            [199, 12, '            s.let op = operator\n'],
            [200, 12, '            s.let operation = pygame.sprite.OrderedUpdates(Operator(s.op))\n'],
            [201, 12, '            s.operation.add(pygame.sprite.Group.copy(s.exprTree.leafsAndOps))\n'],
            [202, 8, '        }\n'],
            [203, 8, '        else {\n'],
            [204, 12, '            s.operation = None\n'],
            [205, 8, '        }\n'],
            [206, 4, '    }\n'],
            [207, 4, '    setOperationCoords(startx, starty, mul_pow_offset=None) {\n'],
            [208, 8, '        """\n'],
            [209, 8, '        (#1): set position first leaf in expression\n'],
            [210, 8, "        (#2): if the leaf position we about to set is '*', offset of 20.\n"],
            [211, 8, "        (#3): same as number 2 but '**'\n"],
            [212, 8, "        (#4): if the last leaf position set was '*', then offest of 20.\n"],
            [213, 8, "        (#5): same as number 4 but '**'\n"],
            [214, 8, '        """\n'],
            [215, 8, '        s = this\n'],
            [216, 8, '        if (mul_pow_offset == None) {\n'],
            [217, 12, '            let mul_pow_offset = 10\n'],
            [218, 8, '        }\n'],
            [219, 8, '        if (len(s.operation._spritelist) > 0) {\n'],
            [220, 12,
             "            s.operation._spritelist[0].position((startx, starty), rectKeyword='midleft')  # 1\n"],
            [221, 12, '            let posX = s.operation._spritelist[0].rect.right\n'],
            [222, 12, '            let posY = s.operation._spritelist[0].rect.centery\n'],
            [223, 12, '            for (i in range(1, len(s.operation._spritelist))) {\n'],
            [224, 16, "                if (s.operation._spritelist[i].node == '*'  # 2\n"],
            [225, 24, "                        or s.operation._spritelist[i].node == '**'  # 3\n"],
            [226, 24, "                        or s.operation._spritelist[i - 1].node == '*'  # 4\n"],
            [227, 24, "                        or s.operation._spritelist[i - 1].node == '**'):\n"],
            [228, 20, '                    posX = s.operation._spritelist[i - 1].rect.right + mul_pow_offset\n'],
            [229, 20, '                    posY = s.operation._spritelist[i - 1].rect.centery\n'],
            [230, 16, '                else {\n'],
            [231, 20, '                    posX = s.operation._spritelist[i - 1].rect.right + 20\n'],
            [232, 20, '                    posY = s.operation._spritelist[i - 1].rect.centery\n'],
            [233, 16, '                }\n'],
            [234, 16, "                s.operation._spritelist[i].position((posX, posY), rectKeyword='midleft')\n"],
            [235, 16, "                # , rectKeyword='midleft'\n"],
            [236, 12, '            }\n'],
            [237, 8, '        }\n'],
            [238, 8, '        else {\n'],
            [239, 12, '            s.exprTree.position((startx, starty))\n'],
            [240, 8, '        }\n'],
            [241, 4, '    }\n'],
            [242, 4, '    setCoords(startx, starty, mul_pow_offset=None) {\n'],
            [243, 8, '        """\n'],
            [244, 8, '        (#1): set position first leaf in expression\n'],
            [245, 8, "        (#2): if the leaf position we about to set is '*', offset of 20.\n"],
            [246, 8, "        (#3): same as number 2 but '**'\n"],
            [247, 8, "        (#4): if the last leaf position set was '*', then offest of 20.\n"],
            [248, 8, "        (#5): same as number 4 but '**'\n"],
            [249, 8, '        """\n'],
            [250, 8, '        s = this\n'],
            [251, 8, '        if (mul_pow_offset == None) {\n'],
            [252, 12, '            mul_pow_offset = 10\n'],
            [253, 8, '        }\n'],
            [254, 8, '        if (len(s.exprTree.leafsAndOps._spritelist) > 0) {\n'],
            [255, 12,
             "            s.exprTree.leafsAndOps._spritelist[0].position((startx, starty), rectKeyword='midleft')  # 1\n"],
            [256, 12, '            posX = s.exprTree.leafsAndOps._spritelist[0].rect.right\n'],
            [257, 12, '            posY = s.exprTree.leafsAndOps._spritelist[0].rect.centery\n'],
            [258, 12, '            for (i in range(1, len(s.exprTree.leafsAndOps._spritelist))) {\n'],
            [259, 16, "                if (s.exprTree.leafsAndOps._spritelist[i].node == '*'  # 2\n"],
            [260, 24, "                        or s.exprTree.leafsAndOps._spritelist[i].node == '**'  # 3\n"],
            [261, 24, "                        or s.exprTree.leafsAndOps._spritelist[i - 1].node == '*'  # 4\n"],
            [262, 24, "                        or s.exprTree.leafsAndOps._spritelist[i - 1].node == '**'):\n"],
            [263, 20,
             '                    posX = s.exprTree.leafsAndOps._spritelist[i - 1].rect.right + mul_pow_offset\n'],
            [264, 20, '                    posY = s.exprTree.leafsAndOps._spritelist[i - 1].rect.centery\n'],
            [265, 16, '                else {\n'],
            [266, 20, '                    posX = s.exprTree.leafsAndOps._spritelist[i - 1].rect.right + 20\n'],
            [267, 20, '                    posY = s.exprTree.leafsAndOps._spritelist[i - 1].rect.centery\n'],
            [268, 16, '                }\n'],
            [269, 16,
             "                s.exprTree.leafsAndOps._spritelist[i].position((posX, posY), rectKeyword='midleft')\n"],
            [270, 16, "                # , rectKeyword='midleft'\n"],
            [271, 12, '            }\n'],
            [272, 8, '        }\n'],
            [273, 8, '        else {\n'],
            [274, 12, '            s.exprTree.position((startx, starty))\n'],
            [275, 8, '        }\n'],
            [276, 4, '    }\n'],
            [277, 0, '}\n'],
            [278, 0, 'export class Node(pygame.sprite.Sprite) {\n'],
            [279, 4, '    constructor(node, parent) {\n'],
            [280, 8, '        """\n'],
            [281, 8, '        """\n'],
            [282, 8, '        pygame.sprite.Sprite.__init__(this)\n'],
            [283, 8, '        s = this\n'],
            [284, 8, '        s.node = node\n'],
            [285, 8, '        s.let parent = parent\n'],
            [286, 8, '        s.let _children = []\n'],
            [287, 8, '        s.let leafsAndOps = pygame.sprite.OrderedUpdates()\n'],
            [288, 8, '        s.image = None\n'],
            [289, 8, '        s.rect = None\n'],
            [290, 8, '        s.let operators = []\n'],
            [291, 8, '        s.let appList = []\n'],
            [292, 8, '        if (not s.node.is_Number) {\n'],
            [293, 12, '            s.let degree = degree(s.node)\n'],
            [294, 8, '        }\n'],
            [295, 8, '        else {\n'],
            [296, 12, '            s.degree = 0\n'],
            [297, 8, '        }\n'],
            [298, 8, '        if (s.node.args != ()) {\n'],
            [299, 12, '            for (child in s.node.args) {\n'],
            [300, 16, '                this._children.append(Node(child, s))\n'],
            [301, 12, '            }\n'],
            [302, 12, '            let opCount = len(s.node.args) - 1\n'],
            [303, 12, '            for (i in range(opCount)) {\n'],
            [304, 16, '                s.operators.append(Operator(getOpStr(s.node)))\n'],
            [305, 12, '            }\n'],
            [306, 8, '        }\n'],
            [307, 8, '        else {\n'],
            [308, 12, '            s.saveImage(s.node)  # only want to save pictures of leaf nodes\n'],
            [309, 12, '            s.loadImage()\n'],
            [310, 8, '        }\n'],
            [311, 4, '    }\n'],
            [312, 4, '    get_x_dist_apart(leaderX) {\n'],
            [313, 8, '        """\n'],
            [314, 8, '        return the x distance between the parameter passed in, and the centerx\n'],
            [315, 8, '        coordinate of this.rect\n'],
            [316, 8, '        """\n'],
            [317, 8, '        return this.rect.centerx - leaderX\n'],
            [318, 4, '    }\n'],
            [319, 4, '    update(code_str, *args) {\n'],
            [320, 8, '        """\n'],
            [321, 8, '        """\n'],
            [322, 8, '        s = this\n'],
            [323, 8, '        exec(code_str)\n'],
            [324, 8, '        return\n'],
            [325, 4, '    }\n'],
            [326, 4, '    buildSpriteGroup() {\n'],
            [327, 8, '        """\n'],
            [328, 0, 'export         see class Root __init__ inner method buildGroups\n'],
            [329, 8, '        every group consists of the leaf nodes that are below that node and \n'],
            [330, 8, '        the operator of the node.\n'],
            [331, 8, '        """\n'],
            [332, 8, '        s = this\n'],
            [333, 8, '        if (s.node.args == ()) {\n'],
            [334, 12, '            s.leafsAndOps.add(this)\n'],
            [335, 12, '            return [this]\n'],
            [336, 8, '        }\n'],
            [337, 8, '        for (child in s._children) {\n'],
            [338, 12, '            let spriteList = child.buildSpriteGroup()\n'],
            [339, 12, '            s.leafsAndOps.add(*spriteList)\n'],
            [340, 12, '            if (len(s.operators) > 0) {\n'],
            [341, 16, '                op = s.operators.pop(0)\n'],
            [342, 16, '                s.leafsAndOps.add(op)\n'],
            [343, 12, '            }\n'],
            [344, 8, '        }\n'],
            [345, 8, '        return s.leafsAndOps._spritelist\n'],
            [346, 4, '    }\n'],
            [347, 4, '    moveTo(x, y) {\n'],
            [348, 8, '        """\n'],
            [349, 8, '        """\n'],
            [350, 8, '        this.rect.move_ip(x, y)\n'],
            [351, 4, '    }\n'],
            [352, 4, '    position(pos, rectKeyword=None) {\n'],
            [353, 8, '        """\n'],
            [354, 8, "        argument parameter 'pos' is a tuple.\n"],
            [355, 8, '        if no rectKeyword then the elements of tuple are x and y coordinates,\n'],
            [356, 8, '        otherwise use rectKeyword as the keyword argument in get_rect() function\n'],
            [357, 8, '        call.\n'],
            [358, 8, '        """\n'],
            [359, 8, '        if (rectKeyword == None) {\n'],
            [360, 12, '            x, y = pos[0], pos[1]\n'],
            [361, 12, '            this.rect = this.image.get_rect()\n'],
            [362, 12, '            this.rect.centerx = x\n'],
            [363, 12, '            this.rect.let centery = y\n'],
            [364, 8, '        }\n'],
            [365, 8, '        else {\n'],
            [366, 12, "            exec('this.rect = this.image.get_rect({}={})'.format(rectKeyword, pos))\n"],
            [367, 8, '        }\n'],
            [368, 4, '    }\n'],
            [369, 4, '    loadImage() {\n'],
            [370, 8, '        this.image = pygame.image.load(imageTable[str(this.node)])\n'],
            [371, 4, '    }\n'],
            [372, 4, '    saveImage(node) {\n'],
            [373, 8, '        """\n'],
            [374, 8, '        (#1): create the entry\n'],
            [375, 8, '        (#2): value of the dict entry is an file path to a image where the \n'],
            [376, 14, '              name of the image is the id of the dict entry\n'],
            [377, 8, '        (#3): image is created\n'],
            [378, 8, '        (#4): image object is loaded in from pic specified in dict\n'],
            [379, 8, '        (#5): the image was already put in the table, so simply upload it.\n'],
            [380, 8, '        """\n'],
            [381, 8, '        s = this\n'],
            [382, 8, '        export function _saveSymbolImage(strNode) {\n'],
            [383, 12, '            """\n'],
            [384, 12, '            modified from:\n'],
            [385, 12,
             '            https://stackoverflow.com/questions/36191953/matplotlib-save-only-text-without-whitespace \n'],
            [386, 12, '            author: martain evans\n'],
            [387, 12, '            (#5): \n'],
            [388, 12, '            (#6): here we are getting text of current s.node in Latex form\n'],
            [389, 12, '            (#7): create a matplotlib figure (window pops up)\n'],
            [390, 12, '            (#8): draw the Latex on the figure at the specified coordinates\n'],
            [391, 12, '            (#9): initially the figure has white background\n'],
            [392, 12, '            (#10) { an xy plane is shown by export functionault, turn it off\n'],
            [393, 12, '            (#11): make text fit inside the figure\n'],
            [394, 12, '            """\n'],
            [395, 12, '            lat = latex(s.node)  # 6\n'],
            [396, 12, '            fig = plt.figure()  # 7\n'],
            [397, 12, '            t = plt.text(0.001, 0.001, r"$%s$" % lat, fontsize=30)  # 8\n'],
            [398, 12, "            fig.patch.set_facecolor('white')  # 9\n"],
            [399, 12, "            plt.axis('off')  # 10\n"],
            [400, 12, '            plt.tight_layout()  # 11\n'],
            [401, 12, '            with io.BytesIO() as png_buf:\n'],
            [402, 16, "                plt.savefig(png_buf, transparent=True, bbox_inches='tight', pad_inches=0)\n"],
            [403, 16, '                png_buf.seek(0)\n'],
            [404, 16, '                image = Image.open(png_buf)\n'],
            [405, 16, '                image.load()\n'],
            [406, 16, '                inverted_image = ImageOps.invert(image.convert("RGB"))\n'],
            [407, 16, '                cropped = image.crop(inverted_image.getbbox())\n'],
            [408, 16, '                cropped.save(imageTable[strNode])\n'],
            [409, 16, "                # to do: find way to close figure that doesn't result in error.\n"],
            [410, 8, '        }\n'],
            [411, 8, '        if (str(s.node) not in imageTable.keys()) {\n'],
            [412, 12, '            id_ = random.randint(10000, 99999)\n'],
            [413, 12, '            while (id_ in _uniqueIDs) {\n'],
            [414, 16, '                id_ = random.randint(10000, 99999)\n'],
            [415, 12, '            }\n'],
            [416, 12, '            _uniqueIDs.append(id_)\n'],
            [417, 12, '            imageTable[str(s.node)] = "uniqueSyms/{}.png".format(id_)  # 2\n'],
            [418, 12, '            _saveSymbolImage(str(s.node))  # 3\n'],
            [419, 8, '        }\n'],
            [420, 4, '    }\n'],
            [421, 4, '    __repr__() {\n'],
            [422, 8,
             '        return "Node({}) centerx:{} centery:{}".format(str(this.node), this.rect.centerx, this.rect.centery)\n'],
            [423, 8, '        # return "Node({}).format(str(this.node))\n'],
            [424, 4, '    }\n'],
            [425, 4, '    __str__() {\n'],
            [426, 8, '        return this.__repr__()\n'],
            [427, 4, '    }\n'],
            [428, 0, '}\n'],
            [429, 0, 'export class Equation {\n'],
            [430, 4, '    constructor(lhs, rhs) {\n'],
            [431, 8, '        s = this\n'],
            [432, 8, '        # left off here. TODO: Figure out how to know where to start let the = sign and\n'],
            [433, 8, '        # the rhs of the equation.\n'],
            [434, 8, '        s.let lhs = Root(lhs)\n'],
            [435, 8, "        s.let _equalto = Operator('=')\n"],
            [436, 8, '        s.let rhs = Root(rhs)\n'],
            [437, 8, '        s.let opsBothSides = []\n'],
            [438, 8, '        s.let termList = []\n'],
            [439, 8, '        s.let quantities = []  # stores termList copies\n'],
            [440, 8, '        s.let mostRecentLhs = None\n'],
            [441, 8, '        s.let mostRecentRhs = None\n'],
            [442, 8, '        s.let sympyRhsCopy = None\n'],
            [443, 8, '        s.let sympyRhsHistory = []\n'],
            [444, 8, '        s.let sympyLhsHistory = []\n'],
            [445, 8, '        s.let codeList = []\n'],
            [446, 8, '        s.let currentLhs = None\n'],
            [447, 8, '        s.let currentRhs = None\n'],
            [448, 8, '        s.let current_operation_lhs = None\n'],
            [449, 8, '        s.current_operation_lhs = None\n'],
            [450, 8, '        s.let term_w_matching_degree = ""\n'],
            [451, 8, '        s.let screen = None\n'],
            [452, 4, '    }\n'],
            [453, 4, '    setTermList(n) {\n'],
            [454, 8, '        if (n.node.is_Add) {\n'],
            [455, 12, '            for (child in n._children) {\n'],
            [456, 16, '                this.termList.append(child.node)\n'],
            [457, 12, '            }\n'],
            [458, 8, '        }\n'],
            [459, 8, '        for (child in n._children) {\n'],
            [460, 12, '            this.setTermList(child)\n'],
            [461, 8, '        }\n'],
            [462, 8, '        return\n'],
            [463, 4, '    }\n'],
            [464, 4, '    flipSides() {\n'],
            [465, 8, '        """\n'],
            [466, 8, '        makes this.mostRecentLhs and this.mostRecentRhs switch places\n'],
            [467, 8, '        """\n'],
            [468, 8, '        s = this\n'],
            [469, 8, '        s.mostRecentLhs, s.mostRecentRhs = s.mostRecentRhs, s.mostRecentLhs\n'],
            [470, 8, '        s.updateHistory()\n'],
            [471, 4, '    }\n'],
            [472, 4, '    updateHistory() {\n'],
            [473, 8, '        s = this\n'],
            [474, 8, '        s.sympyLhsHistory.append(Root(copy.deepcopy(s.mostRecentLhs)))\n'],
            [475, 8, '        s.sympyRhsHistory.append(Root(copy.deepcopy(s.mostRecentRhs)))\n'],
            [476, 4, '    }\n'],
            [477, 4, '    performOperation(op, value) {\n'],
            [478, 8, '        """\n'],
            [479, 8, '        operation of value value applied both sides (substract 4x, add 2y, etc)\n'],
            [480, 8, '        first recored the operation (for sprite objects animation) then perform\n'],
            [481, 8, '        op on sympy objects on both sides (most recent expressions).\n'],
            [482, 8, '        """\n'],
            [483, 8, '        s = this\n'],
            [484, 8,
             '        s.opsBothSides.append((Root(value, op), Root(value, op)))  # one operation, but need to store 2 images.\n'],
            [485, 8, '        let code_ = "s.mostRecentLhs " + op + "=" + " value"\n'],
            [486, 8, '        exec(code_)\n'],
            [487, 8, '        code_ = "s.mostRecentRhs " + op + "=" + " value"\n'],
            [488, 8, '        exec(code_)\n'],
            [489, 8, '        return\n'],
            [490, 4, '    }\n'],
            [491, 0, '}\n'],
            [492, 0, 'export class PolyD1(Equation) {\n'],
            [493, 4, '    constructor(lhs, rhs) {\n'],
            [494, 8, '        # TODO: implement method that sets up steps for the animation of collecting\n'],
            [495, 8, '        # like terms. This is done before the planSteps method is called.\n'],
            [496, 8, '        export function type1GetTerm(side, var) {\n'],
            [497, 12, '            """\n'],
            [498, 12, '            Type1(Equation) constructor inner method \n'],
            [499, 12, '            method called from if block, method assumes that:\n'],
            [500, 12, '            a. side is a tree of nodes containing sympy objects \n'],
            [501, 12, '            b. side contains only one type of variable\n'],
            [502, 12, '            c. that side contains a symbol that equals var (var in constructor)\n'],
            [503, 12, '            d. that side is a ploynomial of degree 1\n'],
            [504, 12, '            e. like terms were collected on both sides of the equation before\n'],
            [505, 15, '               method was called.\n'],
            [506, 12, '            """\n'],
            [507, 12, '            if (side.is_Mul and side.has(var)) {\n'],
            [508, 16, '                return side\n'],
            [509, 12, '            }\n'],
            [510, 12, '            else {\n'],
            [511, 16, '                for (arg in side.args) {\n'],
            [512, 20, '                    if (arg.has(var)) {\n'],
            [513, 24, '                        return arg\n'],
            [514, 20, '                    }\n'],
            [515, 16, '                }\n'],
            [516, 16, '                return None\n'],
            [517, 12, '            }\n'],
            [518, 8, '        }\n'],
            [519, 8, '        export function type1GetNum(side) {\n'],
            [520, 12, '            """\n'],
            [521, 12, '            Type1(Equation) constructor inner method \n'],
            [522, 12, '            """\n'],
            [523, 12, '            for (arg in side.args) {\n'],
            [524, 16, '                if (arg.is_Number) {\n'],
            [525, 20, '                    return arg\n'],
            [526, 16, '                }\n'],
            [527, 12, '            }\n'],
            [528, 12, '            return None\n'],
            [529, 8, '        }\n'],
            [530, 8, '        export function getSteps() {\n'],
            [531, 12, '            """\n'],
            [532, 12, '            In this method we are determining the operation to be \n'],
            [533, 12, '            performed to both sides, recording the operation, and then \n'],
            [534, 12, '            performing it to COPIES of lhs and rhs that are then stored in the\n'],
            [535, 12, '            lists sympyRhsHistory and sympyLhsHistory\n'],
            [536, 12, '            Type1(Equation) contstuctor inner method\n'],
            [537, 12, '            like terms should be collected on both sides of the equation before\n'],
            [538, 12, '            this method is called.\n'],
            [539, 12, '            (#1): the variable is not in lhs and not in rhs\n'],
            [540, 12, '            (#2): lsv and not rsv\n'],
            [541, 12, '            (#3): rsv and not lsv\n'],
            [542, 12, '            (#4): lsv and rsv\n'],
            [543, 12, '            """\n'],
            [544, 12, '            export function var_on_L_and_not_on_R() {\n'],
            [545, 16, '                """\n'],
            [546, 16, '                internal function of internal function of the Type1(Equation)\n'],
            [547, 16, '                constructor\n'],
            [548, 16, '                """\n'],
            [549, 16, '                let lhsNum = type1GetNum(s.mostRecentLhs)\n'],
            [550, 16, '                if (lhsNum != None) {\n'],
            [551, 20, "                    s.performOperation('-', lhsNum)\n"],
            [552, 20, '                    s.updateHistory()\n'],
            [553, 16, '                }\n'],
            [554, 16, '                let lhsTerm = type1GetTerm(s.mostRecentLhs, var)\n'],
            [555, 16, '                lhsNum = type1GetNum(lhsTerm)\n'],
            [556, 16, '                if (lhsNum != 1) {\n'],
            [557, 20, "                    s.performOperation('/', lhsNum)\n"],
            [558, 20, '                    s.updateHistory()\n'],
            [559, 16, '                }\n'],
            [560, 12, '            }\n'],
            [561, 12, '            export function var_on_R_and_not_on_L() {\n'],
            [562, 16, '                """\n'],
            [563, 16, '                internal function of internal function of the Type1(Equation)\n'],
            [564, 16, '                constructor\n'],
            [565, 16, '                """\n'],
            [566, 16, '                let rhsNum = type1GetNum(s.mostRecentRhs)\n'],
            [567, 16, '                if (rhsNum != None) {\n'],
            [568, 20, "                    s.performOperation('-', rhsNum)\n"],
            [569, 20, '                    s.updateHistory()\n'],
            [570, 16, '                }\n'],
            [571, 16, '                let rhsTerm = type1GetTerm(s.mostRecentRhs, var)\n'],
            [572, 16, '                rhsNum = type1GetNum(rhsTerm)\n'],
            [573, 16, '                if (rhsTerm != 1) {\n'],
            [574, 20, "                    s.performOperation('/', rhsTerm)\n"],
            [575, 20, '                    s.updateHistory()\n'],
            [576, 20, '                    # s.flipSides()\n'],
            [577, 16, '                }\n'],
            [578, 12, '            }\n'],
            [579, 12, '            export function var_on_both_L_and_R() {\n'],
            [580, 16, '                """\n'],
            [581, 16, '                currently successfull\n'],
            [582, 16, '                """\n'],
            [583, 16, '                lhsTerm = type1GetTerm(s.mostRecentLhs, var)\n'],
            [584, 16, '                rhsTerm = type1GetTerm(s.mostRecentRhs, var)\n'],
            [585, 16, '                if ((lhsTerm - rhsTerm) == 0) {\n'],
            [586, 20, '                    print("error, invalid equation")\n'],
            [587, 16, '                }\n'],
            [588, 16, '                else if (Gt(lhsTerm.subs(var, 1), rhsTerm.subs(var, 1))) {\n'],
            [589, 20, "                    s.performOperation('-', rhsTerm)\n"],
            [590, 20, '                    s.updateHistory()\n'],
            [591, 16, '                }\n'],
            [592, 16, '                else if (Lt(lhsTerm.subs(var, 1), rhsTerm.subs(var, 1))) {\n'],
            [593, 20, "                    s.performOperation('-', rhsTerm)\n"],
            [594, 20, '                    s.updateHistory()\n'],
            [595, 20, '                    # s.flipSides() # flip sides for (animation later)\n'],
            [596, 16, '                }\n'],
            [597, 16, '                let lhsNumber = type1GetNum(s.mostRecentLhs)\n'],
            [598, 16, '                if (lhsNumber != None) {\n'],
            [599, 20, "                    s.performOperation('-', lhsNumber)\n"],
            [600, 20, '                    s.updateHistory()\n'],
            [601, 16, '                }\n'],
            [602, 16, '                lhsTerm = type1GetTerm(s.mostRecentLhs, var)\n'],
            [603, 16, '                lhsNum = lhsTerm.subs(var, 1)  # we know lone Mul object at this point\n'],
            [604, 16, '                if (lhsNum != 1) {\n'],
            [605, 20, "                    s.performOperation('/', lhsNum)\n"],
            [606, 20, '                    s.updateHistory()\n'],
            [607, 16, '                }\n'],
            [608, 12, '            }\n'],
            [609, 12, '            if (len(s.lhs.exprTree.node.free_symbols) > 0) {\n'],
            [610, 16, '                let L = list(s.lhs.exprTree.node.free_symbols)\n'],
            [611, 16, '                let var = L[0]\n'],
            [612, 12, '            }\n'],
            [613, 12, '            else if (len(s.rhs.exprTree.node.free_symbols) > 0) {\n'],
            [614, 16, '                L = list(s.rhs.exprTree.node.free_symbols)\n'],
            [615, 16, '                var = L[0]\n'],
            [616, 12, '            }\n'],
            [617, 12, '            else {\n'],
            [618, 16, "                print('invalid equation')\n"],
            [619, 12, '            }\n'],
            [620, 12, '            s.mostRecentLhs = copy.deepcopy(s.lhs.exprTree.node)\n'],
            [621, 12, '            s.mostRecentRhs = copy.deepcopy(s.rhs.exprTree.node)\n'],
            [622, 12, '            s.updateHistory()\n'],
            [623, 12, '            if (not s.mostRecentLhs.has(var) and not s.mostRecentRhs.has(var)) {\n'],
            [624, 16, '                print("error: invalid equation")\n'],
            [625, 12, '            }\n'],
            [626, 12, '            else if (s.mostRecentLhs.has(var) and not s.mostRecentRhs.has(var)) {\n'],
            [627, 16, '                var_on_L_and_not_on_R()\n'],
            [628, 12, '            }\n'],
            [629, 12, '            else if (not s.mostRecentLhs.has(var) and s.mostRecentRhs.has(var)) {\n'],
            [630, 16, '                var_on_R_and_not_on_L()\n'],
            [631, 12, '            }\n'],
            [632, 12, '            else if (s.mostRecentLhs.has(var) and s.mostRecentRhs.has(var)) {\n'],
            [633, 16, '                var_on_both_L_and_R()\n'],
            [634, 12, '            }\n'],
            [635, 8, '        }\n'],
            [636, 8, '        Equation.__init__(this, lhs, rhs)\n'],
            [637, 8, '        s = this\n'],
            [638, 8, '        getSteps()\n'],
            [639, 4, '    }\n'],
            [640, 4, '    findMatchingDegree(operand, side) {  # -> Node\n'],
            [641, 8, '        if (len(side.exprTree._children) > 0) {\n'],
            [642, 12, '            for (child in side.exprTree._children) {\n'],
            [643, 16, '                if (child.degree == operand.exprTree.degree) {\n'],
            [644, 20, '                    return child\n'],
            [645, 16, '                }\n'],
            [646, 12, '            }\n'],
            [647, 8, '        }\n'],
            [648, 8, '        else if (side.exprTree.degree == operand.exprTree.degree) {\n'],
            [649, 12, '            return side.exprTree\n'],
            [650, 8, '        }\n'],
            [651, 8, '        else {\n'],
            [652, 12, '            return None\n'],
            [653, 8, '        }\n'],
            [654, 4, '    }\n'],
            [655, 4, '    findFurthestRight(side) {\n'],
            [656, 8, '        s = this\n'],
            [657, 8, '        let a = 0\n'],
            [658, 8, '        let furR = None\n'],
            [659, 8, '        for (leaf in side.exprTree.leafsAndOps._spritelist) {\n'],
            [660, 12, '            if (leaf.rect.right > a) {\n'],
            [661, 16, '                a = leaf.rect.right\n'],
            [662, 16, '                furR = leaf\n'],
            [663, 12, '            }\n'],
            [664, 8, '        }\n'],
            [665, 8, '        return furR\n'],
            [666, 4, '    }\n'],
            [667, 4, '    findRoute(start, dest, axis) {\n'],
            [668, 8, '        s = this\n'],
            [669, 8, '        let route = None\n'],
            [670, 8, "        if (axis == 'x') {\n"],
            [671, 12, '            # find the middle of term with matching degree:\n'],
            [672, 12, '            if (dest - start > 0) {\n'],
            [673, 16, "                route = Route('+x', dest)\n"],
            [674, 12, '            }\n'],
            [675, 12, '            else {\n'],
            [676, 16, "                route = Route('-x', dest)\n"],
            [677, 12, '            }\n'],
            [678, 8, '        }\n'],
            [679, 8, "        else if (axis == 'y') {\n"],
            [680, 12, '            if (dest - start > 0) {\n'],
            [681, 16, "                route = Route('+y', dest)\n"],
            [682, 12, '            }\n'],
            [683, 12, '            else {\n'],
            [684, 16, "                route = Route('-y', dest)\n"],
            [685, 12, '            }\n'],
            [686, 8, '        }\n'],
            [687, 8, '        return route\n'],
            [688, 4, '    }\n'],
            [689, 4, '    set_routes(operation, side) {\n'],
            [690, 8, '        """\n'],
            [691, 8, '        goal of this method is to intialize the leader and the route for each \n'],
            [692, 8, '        operation.\n'],
            [693, 8, '        """\n'],
            [694, 8, '        export function set_slide_in(operation, side) {\n'],
            [695, 12, '            """\n'],
            [696, 12, '            goal is to move the the operation (operator and operand being performed) \n'],
            [697, 12, '            to align with the middle of expression (lhs or rhs of equation).\n'],
            [698, 12, '            """\n'],
            [699, 12, '            s.term_w_matching_degree = s.findMatchingDegree(operation, side)  # 3\n'],
            [700, 12, '            if (s.term_w_matching_degree != None) {\n'],
            [701, 16, '                let indx1 = ((len(\n'],
            [702, 20,
             '                    operation.exprTree.leafsAndOps._spritelist) + 1) // 2) - 1  # we want the center of just the operand, not the operator\n'],
            [703, 16,
             '                let indx2 = ((len(s.term_w_matching_degree.leafsAndOps._spritelist) + 1) // 2) - 1\n'],
            [704, 16, '                let leader = operation.exprTree.leafsAndOps._spritelist[indx1]\n'],
            [705, 16,
             '                let goal_x = s.term_w_matching_degree.leafsAndOps._spritelist[indx2].rect.centerx\n'],
            [706, 16, '                # add where the leader is going and\n'],
            [707, 16, "                route = s.findRoute(leader.rect.centerx, goal_x, 'x')\n"],
            [708, 16, '                operation.actionList.append((leader, route))\n'],
            [709, 12, '            }\n'],
            [710, 12, '            else {\n'],
            [711, 16, '                indx1 = ((len(operation.operation._spritelist) + 1) // 2) - 1\n'],
            [712, 16, '                indx2 = ((len(side.exprTree.leafsAndOps._spritelist) + 1) // 2) - 1\n'],
            [713, 16, '                leader = operation.operation._spritelist[indx1]\n'],
            [714, 16, '                # operation.leader = leader\n'],
            [715, 16, '                goal_x = s.side.leafsAndOps._spritelist[indx2].rect.centerx\n'],
            [716, 16, '                # add where the leader is going and\n'],
            [717, 16, "                route = s.findRoute(leader.rect.centerx, goal_x, 'x')\n"],
            [718, 16, '                operation.actionList.append((leader, route))\n'],
            [719, 12, '            }\n'],
            [720, 8, '        }\n'],
            [721, 8, '        export function set_move_up(operation, side) {\n'],
            [722, 12, '            """\n'],
            [723, 12, '            """\n'],
            [724, 12, '            if (s.term_w_matching_degree != None) {\n'],
            [725, 16, '                let goal_y = s.term_w_matching_degree.leafsAndOps._spritelist[\n'],
            [726, 29,
             '                             0].rect.bottom - 3  # any leaf node works, they all share the same bottom (i.e. y) coordinate\n'],
            [727, 16, '                leader, route = operation.actionList[-1]\n'],
            [728, 16, "                route = s.findRoute(leader.rect.top, goal_y, 'y')\n"],
            [729, 16, '                operation.actionList.append((leader, route))\n'],
            [730, 12, '            }\n'],
            [731, 12, '            else {\n'],
            [732, 16, '                goal_y = side.rect.bottom - 3\n'],
            [733, 16, '                leader, route = operation.actionList[-1]\n'],
            [734, 16, "                route = s.findRoute(leader.rect.top, goal_y, 'y')\n"],
            [735, 16, '                operation.actionList.append((leader, route))\n'],
            [736, 12, '            }\n'],
            [737, 8, '        }\n'],
            [738, 8, '        # method calls:\n'],
            [739, 8, '        s = this\n'],
            [740, 8, '        set_slide_in(operation, side)\n'],
            [741, 8, '        set_move_up(operation, side)\n'],
            [742, 4, '    }\n'],
            [743, 4, '    drawScene() {\n'],
            [744, 8, '        """\n'],
            [745, 8, '        draw everything: currentLhs, currentRhs, current_operation_lhs, current_operation_rhs\n'],
            [746, 8, '        """\n'],
            [747, 8, '        s = this\n'],
            [748, 8, '        s.screen.fill(bossPurple)\n'],
            [749, 8, '        s.currentRhs.exprTree.leafsAndOps.draw(s.screen)\n'],
            [750, 8, '        s.currentLhs.exprTree.leafsAndOps.draw(s.screen)\n'],
            [751, 8, '        s.screen.blit(s._equalto.image, s._equalto.rect)\n'],
            [752, 8, '        s.current_operation_lhs.operation.draw(s.screen)\n'],
            [753, 8, '        s.current_operation_rhs.operation.draw(s.screen)\n'],
            [754, 4, '    }\n'],
            [755, 4, '    setInit(i) {\n'],
            [756, 8, '        """\n'],
            [757, 8, '        sets the sprites to their initial positions\n'],
            [758, 8, '        """\n'],
            [759, 8, '        """\n'],
            [760, 8, '        internal method #2:\n'],
            [761, 8, '        """\n'],
            [762, 8, '        export function setEquationPositions() {\n'],
            [763, 12, '            let startx = display_height * 0.1\n'],
            [764, 12, '            let starty = display_width * 0.5\n'],
            [765, 12, '            # initialize the lhs positions:\n'],
            [766, 12, '            s.sympyLhsHistory[i].setCoords(startx, starty)\n'],
            [767, 12, '            # set start position for equal sign:\n'],
            [768, 12, '            if (s.sympyLhsHistory[i].exprTree.node.args != ()) {\n'],
            [769, 16, '                let furthestRight = s.findFurthestRight(s.sympyLhsHistory[i])\n'],
            [770, 16, '                startx = furthestRight.rect.right + 40\n'],
            [771, 16, '                starty = furthestRight.rect.centery\n'],
            [772, 12, '            }\n'],
            [773, 12, '            else {\n'],
            [774, 16, '                startx = s.sympyLhsHistory[i].exprTree.rect.centerx + 40\n'],
            [775, 16, '                starty = s.sympyLhsHistory[i].exprTree.rect.centery\n'],
            [776, 12, '            }\n'],
            [777, 12, '            # set the equal sign position:\n'],
            [778, 12, "            s._equalto.position((startx, starty), rectKeyword='center')\n"],
            [779, 12, '            # set start position for rhs:\n'],
            [780, 12, '            startx = s._equalto.rect.centerx + 50\n'],
            [781, 12, '            starty = s._equalto.rect.centery\n'],
            [782, 12, '            # set the rhs positions:\n'],
            [783, 12, '            s.sympyRhsHistory[i].setCoords(startx, starty)\n'],
            [784, 12, '            return\n'],
            [785, 8, '        }\n'],
            [786, 8, '        """\n'],
            [787, 8, '        internal method #3:\n'],
            [788, 8, '        """\n'],
            [789, 8, '        export function setOpBothSidesPosition() {\n'],
            [790, 12, '            """\n'],
            [791, 12, '            """\n'],
            [792, 12, '            # for lhs set to the left corner:\n'],
            [793, 12,
             '            s.opsBothSides[i][0].setOperationCoords(display_width * 0.01, display_height * 0.8)\n'],
            [794, 12, '            # for rhs set to the right corner:\n'],
            [795, 12,
             '            s.opsBothSides[i][1].setOperationCoords(display_width * 0.99, display_height * 0.8)\n'],
            [796, 8, '        }\n'],
            [797, 8, '        # SetInit attributes:\n'],
            [798, 8, '        s = this\n'],
            [799, 8, '        setEquationPositions()\n'],
            [800, 8, '        setOpBothSidesPosition()\n'],
            [801, 8, '        return\n'],
            [802, 4, '    }\n'],
            [803, 4, '    play() {\n'],
            [804, 8, '        """\n'],
            [805, 8, '        for every configAnimation method decide what grouping level to\n'],
            [806, 8, '        upload images, from top level grouping (upload entire equation as 1\n'],
            [807, 8, '        image.) to bottom level (every char in equation is uploaded as \n'],
            [808, 8, '        seperate image.) based on the animations to be performed.\n'],
            [809, 8, '        """\n'],
            [810, 8, '        s = this\n'],
            [811, 8, '        # pygame.init()\n'],
            [812, 8, '        s.screen = pygame.display.set_mode((display_width, display_height))\n'],
            [813, 8, "        pygame.display.set_caption('MathPartner')\n"],
            [814, 8, '        let clock = pygame.time.Clock()\n'],
            [815, 8, '        for (i in range(len(s.opsBothSides))) {\n'],
            [816, 12, '            s.setInit(i)\n'],
            [817, 12, '            s.set_routes(s.opsBothSides[i][0], s.sympyLhsHistory[i])\n'],
            [818, 12, '            s.set_routes(s.opsBothSides[i][1], s.sympyRhsHistory[i])\n'],
            [819, 8, '        }\n'],
            [820, 8, '        let count = 0\n'],
            [821, 8, '        let run = True\n'],
            [822, 8, '        while (run) {\n'],
            [823, 12, '            for (event in pygame.event.get()) {\n'],
            [824, 16, '                if (event.type == pygame.QUIT) {\n'],
            [825, 20, '                    run = False\n'],
            [826, 16, '                }\n'],
            [827, 12, '            }\n'],
            [828, 12, '            s.screen.fill(bossPurple)\n'],
            [829, 12,
             '            while (len(s.sympyLhsHistory) > 0 and len(s.sympyRhsHistory) > 0 and len(s.opsBothSides) > 0) {\n'],
            [830, 16, '                s.currentLhs = s.sympyLhsHistory.pop(0)\n'],
            [831, 16, '                s.currentRhs = s.sympyRhsHistory.pop(0)\n'],
            [832, 16, '                s.current_operation_lhs, s.let current_operation_rhs = s.opsBothSides.pop(0)\n'],
            [833, 16, '                lhs_leader, let lhs_route = s.current_operation_lhs.actionList.pop(0)\n'],
            [834, 16, '                rhs_leader, let rhs_route = s.current_operation_rhs.actionList.pop(0)\n'],
            [835, 16, '                s.drawScene()  # draw everything\n'],
            [836, 16, '                pygame.display.update()\n'],
            [837, 16, '                clock.tick(60)\n'],
            [838, 16,
             '                while (lhs_leader.rect.centerx != lhs_route.dest or rhs_leader.rect.centerx != rhs_route.dest) {\n'],
            [839, 20, '                    # lhs:\n'],
            [840, 20,
             "                    if (lhs_route.direction == '+x' and lhs_leader.rect.centerx != lhs_route.dest) {\n"],
            [841, 24, "                        s.current_operation_lhs.operation.update('this.rect.centerx += 1')\n"],
            [842, 24, '                        s.drawScene()  # draw everything\n'],
            [843, 24, '                        pygame.display.update()\n'],
            [844, 24, '                        clock.tick(90)\n'],
            [845, 20, '                    }\n'],
            [846, 20,
             "                    else if (lhs_route.direction == '-x' and lhs_leader.rect.centerx != lhs_route.dest) {\n"],
            [847, 24, "                        s.current_operation_lhs.operation.update('this.rect.centerx -= 1')\n"],
            [848, 24, '                        s.drawScene()  # draw everything\n'],
            [849, 24, '                        pygame.display.update()\n'],
            [850, 24, '                        clock.tick(90)\n'],
            [851, 20, '                    }\n'],
            [852, 20, '                    # rhs:\n'],
            [853, 20,
             "                    if (rhs_route.direction == '+x' and rhs_leader.rect.centerx != rhs_route.dest) {\n"],
            [854, 24, "                        s.current_operation_rhs.operation.update('this.rect.centerx += 1')\n"],
            [855, 24, '                        s.drawScene()  # draw everything\n'],
            [856, 24, '                        pygame.display.update()\n'],
            [857, 24, '                        clock.tick(90)\n'],
            [858, 20, '                    }\n'],
            [859, 20,
             "                    else if (rhs_route.direction == '-x' and rhs_leader.rect.centerx != rhs_route.dest) {\n"],
            [860, 24, "                        s.current_operation_rhs.operation.update('this.rect.centerx -= 1')\n"],
            [861, 24, '                        s.drawScene()  # draw everything\n'],
            [862, 24, '                        pygame.display.update()\n'],
            [863, 24, '                        clock.tick(90)\n'],
            [864, 20, '                    }\n'],
            [865, 16, '                }\n'],
            [866, 16, '                # get next actions:\n'],
            [867, 16, '                lhs_leader, lhs_route = s.current_operation_lhs.actionList.pop(0)\n'],
            [868, 16, '                rhs_leader, rhs_route = s.current_operation_rhs.actionList.pop(0)\n'],
            [869, 16,
             '                while (lhs_leader.rect.top != lhs_route.dest or rhs_leader.rect.top != rhs_route.dest) {\n'],
            [870, 20, '                    # lhs:\n'],
            [871, 20,
             "                    if (lhs_route.direction == '+y' and lhs_leader.rect.top != lhs_route.dest) {\n"],
            [872, 24, "                        s.current_operation_lhs.operation.update('this.rect.top += 1')\n"],
            [873, 24, '                        s.drawScene()  # draw everything\n'],
            [874, 24, '                        pygame.display.update()\n'],
            [875, 24, '                        clock.tick(90)\n'],
            [876, 20, '                    }\n'],
            [877, 20,
             "                    else if (lhs_route.direction == '-y' and lhs_leader.rect.top != lhs_route.dest) {\n"],
            [878, 24, "                        s.current_operation_lhs.operation.update('this.rect.top -= 1')\n"],
            [879, 24, '                        s.drawScene()  # draw everything\n'],
            [880, 24, '                        pygame.display.update()\n'],
            [881, 24, '                        clock.tick(90)\n'],
            [882, 20, '                    }\n'],
            [883, 20, '                    # rhs:\n'],
            [884, 20,
             "                    if (rhs_route.direction == '+y' and rhs_leader.rect.top != rhs_route.dest) {\n"],
            [885, 24, "                        s.current_operation_rhs.operation.update('this.rect.top += 1')\n"],
            [886, 24, '                        s.drawScene()  # draw everything\n'],
            [887, 24, '                        pygame.display.update()\n'],
            [888, 24, '                        clock.tick(90)\n'],
            [889, 20, '                    }\n'],
            [890, 20,
             "                    else if (rhs_route.direction == '-y' and rhs_leader.rect.top != rhs_route.dest) {\n"],
            [891, 24, "                        s.current_operation_rhs.operation.update('this.rect.top -= 1')\n"],
            [892, 24, '                        s.drawScene()  # draw everything\n'],
            [893, 24, '                        pygame.display.update()\n'],
            [894, 24, '                        clock.tick(90)\n'],
            [895, 20, '                    }\n'],
            [896, 16, '                }\n'],
            [897, 16, '                s.drawScene()  # draw everything\n'],
            [898, 16, '                pygame.display.update()\n'],
            [899, 16, '                clock.tick(90)\n'],
            [900, 12, '            }\n'],
            [901, 8, '        }\n'],
            [902, 4, '    }\n'],
            [903, 0, '}\n'],
            [904, 0, '# s.configCode() #build the code statements to be executed\n'],
            [905, 0, '# s.sympyLhsHistory.pop(0); s.sympyRhsHistory.pop(0)\n'],
            [906, 0, 'set_to_corner(operation) {\n'],
            [907, 4, '    """\n'],
            [908, 4, '    initialize the operator and operand to be performed in the corner of screen.\n'],
            [909, 4, '    """\n'],
            [910, 4, '    operation.setCoords(5, 400)\n'],
            [911, 0, '}\n'],
            [912, 0, '# for _sprite in s.currentLhs.exprTree.leafsAndOps._spritelist:\n'],
            [913, 0, '#    s.screen.blit(_sprite.image, _sprite.rect)\n'],
            [914, 0, '# for _sprite in s.currentRhs.exprTree.leafsAndOps._spritelist:\n'],
            [915, 0, '#    s.screen.blit(_sprite.image, _sprite.rect)\n'],
            [916, 0, '# for _sprite in s.current_operation_lhs.operation._spritelist:\n'],
            [917, 0, '#    s.screen.blit(_sprite.image, _sprite.rect)\n'],
            [918, 0, '# for _sprite in s.current_operation_rhs.operation._spritelist:\n'],
            [919, 0, '#    s.screen.blit(_sprite.image, _sprite.rect)\n'],
            [920, 1, '\n']
        ]
    # print_list(refactor_doc_strings(line_data))
    print_list(refactor_doc_strings(line_data2))