import re
from helpers.print_list import print_list


def refactor_comments(line_data):
    """"""
    for i in range(len(line_data)):
        if re.search(r'\s*#(.*)', line_data[i][2]) is not None:
            line_data[i][2] = line_data[i][2].replace('#', '#', 1)
    return line_data


if __name__ == "__main__":
    line_data = \
        [
            [0, 0, 'export function addTo(wsList, whitespace) {\n'],
            [1, 4, "    if (whitespace == '') {\n"],
            [2, 8, "        return wsList, ''\n"],
            [3, 4, '    }\n'],
            [4, 4, '    wsList += [whitespace]\n'],
            [5, 4, "    return wsList, ''\n"],
            [6, 0, '}\n'],
            [7, 0, 'export function getWhitespace(text) {\n'],
            [8, 4, '    let wsList = []\n'],
            [9, 4, "    let whitespace  = ''\n"],
            [10, 4, '    let i = 0\n'],
            [11, 4, '    while ((i < len(text))) {\n'],
            [12, 8, '        while((i < len(text) and text[i].isspace())) {\n'],
            [13, 12, '            whitespace += text[i]\n'],
            [14, 12, '            i+=1\n'],
            [15, 8, '        }\n'],
            [16, 8, '        wsList, let whitespace = addTo(wsList, whitespace)\n'],
            [17, 8, '        i+=1\n'],
            [18, 4, '    }\n'],
            [19, 4, '    return wsList\n'],
            [20, 0, '}\n'],
            [21, 0, 'export function hasAlpha(subString) {\n'],
            [22, 4, '    for (char in subString) {\n'],
            [23, 8, '        if (char.isalpha()) {\n'],
            [24, 12, '            break\n'],
            [25, 8, '        }\n'],
            [26, 4, '    }\n'],
            [27, 4, '    else {\n'],
            [28, 8, '        return False\n'],
            [29, 4, '    }\n'],
            [30, 4, '    return True\n'],
            [31, 0, '}\n'],
            [32, 0, "let _vowelList = ['a', 'e', 'i', 'o', 'u']\n"],
            [33, 0, "let _consonantList = (['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', \n"],
            [34, 20, "                    'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'])\n"],
            [35, 0, "let _capitalVowelList = ['A', 'E', 'I', 'O', 'U']\n"],
            [36, 0, "let _capitalConsonantList = (['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', \n"],
            [37, 28, "                            'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', \n"],
            [38, 28, "                            'Z'])\n"],
            [39, 0, 'let _punctuationList = [\'.\', \',\', \'!\', \'?\', \';\', \':\', "\'", "*"]\n'],
            [40, 0, 'let _specialGrammar = ["\'", \'"\', "(", ")", "-", \'[\', \']\']\n'],
            [41, 0, 'export function isPunc(char) {\n'],
            [42, 4, '    if (char in _punctuationList) {\n'],
            [43, 8, '        return True\n'],
            [44, 4, '    }\n'],
            [45, 4, '    else {\n'],
            [46, 8, '        return False\n'],
            [47, 4, '    }\n'],
            [48, 0, '}\n'],
            [49, 0, 'export function getPunc(word) {\n'],
            [50, 8, '        """     \n'],
            [51, 8, '        first we want to check if there is punctuation at the end of the word.\n'],
            [52, 8, "        we only want to move punctuation to the end of the word when we're\n"],
            [53, 8, '        done, if it was at the end of the word at the start. For example if\n'],
            [54, 8, '        you had "hello...there" you wouldn\'t want to move the \'...\' to the\n'],
            [55, 8, '        end. If there is punctuation at the end of the word, we want to look\n'],
            [56, 8, '        for things like "!!!", "!?!?", "...", at the end of word. so we start\n'],
            [57, 8, '        and the end of the word and work back until reach char not punctuation.\n'],
            [58, 8, '        """\n'],
            [59, 8, "        let punc = ''\n"],
            [60, 8, '        for (char in _punctuationList) {\n'],
            [61, 12, '            if (word.endswith(char)) {\n'],
            [62, 16, '                let punct = True\n'],
            [63, 16, '                break\n'],
            [64, 12, '            }\n'],
            [65, 8, '        }\n'],
            [66, 8, '        else {\n'],
            [67, 12, '            punct = False\n'],
            [68, 8, '        }\n'],
            [69, 8, '        if (punct) {\n'],
            [70, 12, '            let index = -1\n'],
            [71, 12, '            #bounds check for counting from -1 back:\n'],
            [72, 12, '            while (index > -len(word) and isPunc(word[index])) {\n'],
            [73, 16, '                punc += word[index]\n'],
            [74, 16, '                index -= 1\n'],
            [75, 12, '            }\n'],
            [76, 8, '        }\n'],
            [77, 8, '        return punc\n'],
            [78, 0, '}\n'],
            [79, 0, 'export function igpay(word) {\n'],
            [80, 4, '    let noVowels = False\n'],
            [81, 4, '    let capital = False\n'],
            [82, 4, '    let allCaps = False\n'],
            [83, 4, '    #if no vowels are in the word, return the word unchanged:\n'],
            [84, 4, '    for (i in range(0, len(word))) {\n'],
            [85, 8, '        if (word[i] in _vowelList or word[i] in _capitalVowelList) {\n'],
            [86, 12, '            break\n'],
            [87, 8, '        }\n'],
            [88, 4, '    }\n'],
            [89, 4, '    else {\n'],
            [90, 8, '        noVowels = True\n'],
            [91, 4, '    }\n'],
            [92, 4, '    if (noVowels) {\n'],
            [93, 8, '        return word\n'],
            [94, 4, '    }\n'],
            [95, 4, '    #word is assumed to start with alphabetic character. if the first \n'],
            [96, 4, "    #character is a vowel, append 'way' onto the end of the word and return the \n"],
            [97, 4, '    #word:\n'],
            [98, 4, '    if (word[0] in _vowelList or word[0] in _capitalVowelList) {\n'],
            [99, 8, '        #first find any punctuation at end of word:\n'],
            [100, 8, '        punc = getPunc(word)\n'],
            [101, 8, '        #we found punc in reverse order, so reverse:\n'],
            [102, 8, '        let chars = list(punc)\n'],
            [103, 8, '        chars.reverse()\n'],
            [104, 8, "        punc = ''.join(chars)\n"],
            [105, 8, '        if (word.isupper()) {\n'],
            [106, 12, "            word += 'WAY'\n"],
            [107, 8, '        }\n'],
            [108, 8, '        else {\n'],
            [109, 12, "            word += 'way'\n"],
            [110, 8, '        }\n'],
            [111, 8, '        #move any punctuation that was at the end of the word, back to the end\n'],
            [112, 8, '        #of the word:\n'],
            [113, 8, "        if (punc != '') {\n"],
            [114, 12, '            #in case there was the same punctuation eariler in the word, we\n'],
            [115, 12, '            #make sure only to replace the last occurance of it:\n'],
            [116, 12, '            let last = word.count(punc)\n'],
            [117, 12, "            let word = word.replace(punc, '', last)\n"],
            [118, 12, '            word += punc\n'],
            [119, 8, '        }\n'],
            [120, 4, '    }\n'],
            [121, 4, '    #else the first letter not vowel, if consonant:\n'],
            [122, 8, '        #first find any punctuation at end\n'],
            [123, 8, '        #if the first letter is uppercase:\n'],
            [124, 12, '            #flag that it was uppercase\n'],
            [125, 12, '            #if not the entire word is uppercase:\n'],
            [126, 16, '                #change the first letter from upper to lower case(because soon\n'],
            [127, 16, '                #it will not be the first letter)\n'],
            [128, 4, '    else if (word[0] in _consonantList or word[0] in _capitalConsonantList) {\n'],
            [129, 8, '        #get punctuation from end of word if there is:\n'],
            [130, 8, '        punc = getPunc(word)\n'],
            [131, 8, '        #we found punc in reverse order, so reverse:\n'],
            [132, 8, '        chars = list(punc)\n'],
            [133, 8, '        chars.reverse()\n'],
            [134, 8, "        punc = ''.join(chars)\n"],
            [135, 8, '        if (word[0].isupper()) {\n'],
            [136, 12, '            capital = True\n'],
            [137, 12, '            if (not word.isupper()) {\n'],
            [138, 16, '                word = word.replace(word[0], word[0].lower(), 1)\n'],
            [139, 12, '            }\n'],
            [140, 12, '            else {\n'],
            [141, 16, '                allCaps = True\n'],
            [142, 12, '            }\n'],
            [143, 8, '        }\n'],
            [144, 8, '        #traverse the entire word breaking early when vowel is found\n'],
            [145, 12, '            #if the current letter is a lower or uppercase vowel..\n'],
            [146, 16, '                #assign everying up to and not including the vowel as a \n'],
            [147, 16, '                #substring\n'],
            [148, 16, '                #remove everything up to and not including the vowel\n'],
            [149, 16, "                #reattach the substring to the end of the word and append 'ay'\n"],
            [150, 16, '                #if there was a punctuation in the word, it is now in the wrong \n'],
            [151, 16, '                #place, so correct it\n'],
            [152, 8, '        for (i in range(1, len(word))) {\n'],
            [153, 12, '            if (word[i] in _vowelList or word[i] in _capitalVowelList) {\n'],
            [154, 16, '                let sub = word[0:i]\n'],
            [155, 16, "                word = word.replace(word[0:i], '', 1)\n"],
            [156, 16, '                word += sub\n'],
            [157, 16, '                if (allCaps) {\n'],
            [158, 20, "                    word += 'AY'\n"],
            [159, 16, '                }\n'],
            [160, 16, '                else {\n'],
            [161, 20, "                    word += 'ay'\n"],
            [162, 16, '                }\n'],
            [163, 16, "                if (punc != '') {\n"],
            [164, 20, '                    #in case there was same punctuation eariler in word,\n'],
            [165, 20, '                    #make sure only replace last occurance:\n'],
            [166, 20, '                    last = word.count(punc)\n'],
            [167, 20, "                    word = word.replace(punc, '', last)\n"],
            [168, 20, '                    word += punc\n'],
            [169, 16, '                }\n'],
            [170, 16, '                #if flag indicates first letter of the original \n'],
            [171, 16, '                #word was capital.. \n'],
            [172, 20, '                    #make the first letter of the new word capital, and set \n'],
            [173, 20, '                    #the flag back to false:\n'],
            [174, 16, '                #break from the loop because we dont want to keep traversing \n'],
            [175, 16, '                #the word:\n'],
            [176, 16, '                if (capital and not allCaps) {\n'],
            [177, 20, '                    let cap = word[0].capitalize()\n'],
            [178, 20, '                    word = word.replace(word[0], cap, 1)\n'],
            [179, 16, '                }\n'],
            [180, 16, '                break\n'],
            [181, 12, '            }\n'],
            [182, 8, '        }\n'],
            [183, 4, '    }\n'],
            [184, 4, '    #return the new word.\n'],
            [185, 4, '    return word\n'],
            [186, 0, '}\n'],
            [187, 0, 'export function reassemble(words, whSpList, beginingIsWhitespace) {\n'],
            [188, 4, '    i = 0\n'],
            [189, 4, "    let text = ''\n"],
            [190, 4, '    if (beginingIsWhitespace) {\n'],
            [191, 8, '        while((len(whSpList) > 0 or len(words) > 0)) {\n'],
            [192, 12, '            if (len(whSpList) > 0) {\n'],
            [193, 16, '                let next = whSpList.pop(0)\n'],
            [194, 16, '                text += next\n'],
            [195, 12, '            }\n'],
            [196, 12, '            if (len(words) > 0) {\n'],
            [197, 16, '                next = words.pop(0)\n'],
            [198, 16, '                text += next\n'],
            [199, 12, '            }\n'],
            [200, 8, '        }\n'],
            [201, 4, '    }\n'],
            [202, 4, '    else {\n'],
            [203, 8, '        while((len(whSpList) > 0 or len(words) > 0)) {\n'],
            [204, 12, '            if (len(words) > 0) {\n'],
            [205, 16, '                next = words.pop(0)\n'],
            [206, 16, '                text += next\n'],
            [207, 12, '            }\n'],
            [208, 12, '            if (len(whSpList) > 0) {\n'],
            [209, 16, '                next = whSpList.pop(0)\n'],
            [210, 16, '                text += next\n'],
            [211, 12, '            }\n'],
            [212, 8, '        }\n'],
            [213, 4, '    }\n'],
            [214, 4, '    return text\n'],
            [215, 0, '}\n'],
            [216, 0, 'export function noSpecialGrammar(word) {\n'],
            [217, 4, '    for (char in word) {\n'],
            [218, 8, '        if (char in _specialGrammar) {\n'],
            [219, 12, '            break\n'],
            [220, 8, '        }\n'],
            [221, 4, '    }\n'],
            [222, 4, '    else {\n'],
            [223, 8, '        return True\n'],
            [224, 4, '    }\n'],
            [225, 4, '    return False\n'],
            [226, 0, '}\n'],
            [227, 0, 'export function translateHelper(string, delims, parts) {\n'],
            [228, 4, '    "function deals with \'words\' containing grammar other than punctuation"\n'],
            [229, 4, '    if (len(delims) == 0) {\n'],
            [230, 8, '        parts.append(igpay(string))\n'],
            [231, 8, "        let newString = ''.join(parts)\n"],
            [232, 8, '        return newString\n'],
            [233, 4, '    }\n'],
            [234, 4, '    left, grammer, let right = string.partition(delims.pop(0))\n'],
            [235, 4, '    parts.append(igpay(left))\n'],
            [236, 4, '    parts.append(grammer)\n'],
            [237, 4, '    newString = translateHelper(right, delims, parts)\n'],
            [238, 4, '    return newString\n'],
            [239, 0, '}\n'],
            [240, 0, 'export function translate(words) {\n'],
            [241, 4, '    let latinWords = []\n'],
            [242, 4, '    #send one word at a time to igpay:\n'],
            [243, 4, '    for (i in range(0, len(words))) {\n'],
            [244, 8, '        #dosnt check for all grammar, just non punctuation:\n'],
            [245, 8, '        if (noSpecialGrammar(words[i])) {\n'],
            [246, 12, '            latinWords.append(igpay(words[i]))\n'],
            [247, 8, '        }\n'],
            [248, 8, '        else {\n'],
            [249, 12, '            let string = words[i]\n'],
            [250, 12, '            let delims = []\n'],
            [251, 12, '            let j = 0\n'],
            [252, 12, '            while((j < len(string))) {\n'],
            [253, 16, '                if (string[j] in _specialGrammar) {\n'],
            [254, 20, '                    #checking if single quotation mark or apostrophe:\n'],
            [255, 20, '                    if (string[j] == "\'" and j != len(string) - 1) {\n'],
            [256, 24, '                        pass\n'],
            [257, 20, '                    }\n'],
            [258, 20, '                    else {\n'],
            [259, 24, '                        delims.append(string[j])\n'],
            [260, 20, '                    }\n'],
            [261, 16, '                }\n'],
            [262, 16, '                #checking for special case of multiple period trail of,\n'],
            [263, 16, '                #for example "hello...there"\n'],
            [264, 16, '                if (string[j] == "." and j != len(string) - 1 \n'],
            [265, 20, '                    and hasAlpha(string[j:])):\n'],
            [266, 20, "                    let delim_ = ''\n"],
            [267, 20, "                    while (string[j] == '.') {\n"],
            [268, 24, '                        delim_ += string[j]\n'],
            [269, 24, '                        j +=1\n'],
            [270, 20, '                    }\n'],
            [271, 20, '                    else {\n'],
            [272, 24, '                        j -= 1\n'],
            [273, 20, '                    }\n'],
            [274, 20, '                    delims.append(delim_)\n'],
            [275, 16, '                #special case for colon with no leading whitespace:\n'],
            [276, 16, '                if (string[j] == ":" and j != len(string) - 1) {\n'],
            [277, 20, '                    delims.append(string[j])\n'],
            [278, 16, '                }\n'],
            [279, 16, '                j += 1\n'],
            [280, 12, '            }\n'],
            [281, 12, '            newString = translateHelper(string, delims, [])\n'],
            [282, 12, '            latinWords.append(newString)\n'],
            [283, 8, '        }\n'],
            [284, 4, '    }\n'],
            [285, 4, '    return latinWords\n'],
            [286, 0, '}\n'],
            [287, 0, "if (__name__ == '__main__') {\n"],
            [288, 4, '    let words = [\n'],
            [289, 4, '    "Sir", "Patrick", "Stewart", "is", "an", "English", "actor", "whose", "work",\n'],
            [290, 4, '    "has", "included", "roles", "on", "stage", "television", "and", "film", "in", \n'],
            [291, 4, '    "a", "career", "spanning", "almost", "six", "decades", "He", "is", "a", \n'],
            [292, 4, '    "multiple", "time", "Olivier", "Golden", "Globe", "Emmy", "Screen", "Actors", \n'],
            [293, 4, '    "Guild", "and", "Saturn", "Award", "nominee", "Beginning", "his", "career", \n'],
            [294, 4, '    "with", "a", "long", "run", "with", "the", "Royal", "Shakespeare", "Company", \n'],
            [295, 4, '    "Stewart", "received", "the", "1979", "Laurence", "Olivier", "Award", "for", \n'],
            [296, 4, '    "Best", "Actor", "in", "a", "Supporting", "Role", "for", "his", "performance", \n'],
            [297, 4, '    "in", "Antony", "and", "Cleopatra", "on", "the", "West", "End", "Stewart\'s", \n'],
            [298, 4, '    "first", "major", "screen", "roles", "were", "in", "BBC-broadcast", \n'],
            [299, 4, '    "television", "productions", "during", "the","mid-late", "1970s", "including", \n'],
            [300, 4, '    "Hedda", "and", "the", "I", "Claudius", "miniseries", "In","the", "1980s", \n'],
            [301, 4, '    "Stewart", "began", "working", "in", "American", "television", "and", "film", \n'],
            [302, 4, '    "with", "roles","such", "as", "Captain", "Jean-Luc", "Picard", "in", "Star", \n'],
            [303, 4, '    "Trek:", "The", "Next", "Generation", "and","its", "successor", "films", "as", \n'],
            [304, 4, '    "Professor", "Charles", "Xavier", "in", "the", "X-Men", "series", "of",\n'],
            [305, 4, '    "superhero", "films", "the", "lead", "of", "the", "Starz", "TV", "series", \n'],
            [306, 4, '    "Blunt", "Talk", "and", "voice", "roles", "such", "as", "CIA", "Deputy", \n'],
            [307, 4, '    "Director", "Avery", "Bullock", "in", "American", "Dad!", "and", "the", \n'],
            [308, 4, '    "narrator", "in", "Ted", "Having", "remained", "with", "the", "Royal", \n'],
            [309, 4, '    "Shakespeare", "Company", "in", "2008", "Stewart", "played", "King","Claudius", \n'],
            [310, 4, '    "in", "Hamlet", "on", "the", "West", "End", "and", "won", "a", "second", \n'],
            [311, 4, '    "Olivier","Award", "In", "1993", "TV", "Guide", "named", "Stewart", "the", \n'],
            [312, 4, '    "Best", "Dramatic", "Television", "Actor", "of", "the", "1980s", "He",\n'],
            [313, 4, '    "received", "a", "star", "on", "the", "Hollywood", "Walk", "of", "Fame", "on", \n'],
            [314, 4, '    "16", "December", "1996", "In","2010", "Stewart", "was", "knighted", "by", \n'],
            [315, 4, '    "Queen", "Elizabeth", "II", "for", "services", "to", "drama", ]\n'],
            [316, 4, '    latinWords = translate(words)\n'],
            [317, 4, '    if (len(words) == len(latinWords)) {\n'],
            [318, 8, '        for (i in range(0, len(latinWords))) {\n'],
            [319, 12, '            print("English: {:>15}  Pig Latin: {:>15}".format(words[i], latinWords[i]))\n'],
            [320, 8, '        }\n'],
            [321, 4, '    }\n'],
            [322, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'yes\', igpay(\'yes\')))\n'],
            [323, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'add\', igpay(\'add\')))\n'],
            [324, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'office\', igpay(\'office\')))\n'],
            [325, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'why\', igpay(\'why\')))\n'],
            [326, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'The\', igpay(\'The\')))\n'],
            [327, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'parrot\', igpay(\'parrot\')))\n'],
            [328, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format(\'knights\', igpay(\'knights\')))\n'],
            [329, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("Can\'t", igpay("Can\'t")))\n'],
            [330, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("Won\'t", igpay("Won\'t")))\n'],
            [331, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("Who?", igpay("Who?")))\n'],
            [332, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("Ni!", igpay("Ni!")))\n'],
            [333, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("Nu!", igpay("Nu!")))\n'],
            [334, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("3.14159265", igpay("3.14159265")))\n'],
            [335, 0, '}\n'],
            [336, 4, '    print("English: {:>15}  Pig Latin: {:>15}".format("", igpay("")))\n'],
            [337, 1, '\n']
        ]
    print_list(refactor_comments(line_data))